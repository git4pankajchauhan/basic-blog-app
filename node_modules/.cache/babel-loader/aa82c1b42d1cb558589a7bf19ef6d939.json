{"ast":null,"code":"import { createPost, deletePost, getPosts, updatePost } from 'Services/posts.service';\nimport { CONFIRMED_CREATE_POST_ACTION, CONFIRMED_DELETE_POST_ACTION, CONFIRMED_EDIT_POST_ACTION, CONFIRMED_GET_POSTS, GET_POSTS_BY_TAG } from 'Store/constants/post.constant';\nimport { closeDrawer } from './common.action';\nexport const getPostsAction = () => async (dispatch, getState) => {\n  try {\n    const posts = await getPosts();\n    dispatch(confirmedGetPostsAction(posts.data));\n  } catch (error) {\n    console.log('get post action error', error);\n  }\n};\nexport const confirmedGetPostsAction = posts => ({\n  type: CONFIRMED_GET_POSTS,\n  payload: posts\n});\nexport const getPostActionByTag = tags => ({\n  type: GET_POSTS_BY_TAG,\n  payload: tags\n});\nexport const createPostAction = (postData, history) => async (dispatch, getState) => {\n  try {\n    const result = await createPost(postData);\n    const singlePost = result.data.lastpost;\n    dispatch(confirmedCreatePostAction(singlePost));\n    dispatch(closeDrawer());\n  } catch (error) {\n    console.log('create post action error', error);\n  }\n};\nexport const confirmedCreatePostAction = post => ({\n  type: CONFIRMED_CREATE_POST_ACTION,\n  payload: post\n});\nexport const deletePostAction = (postId, history) => async (dispatch, getState) => {\n  try {\n    await deletePost(postId);\n    dispatch(confirmedDeletePostAction(postId));\n    history.push('/posts');\n  } catch (error) {\n    console.log('delete post action error', error);\n  }\n};\nexport const confirmedDeletePostAction = postId => ({\n  type: CONFIRMED_DELETE_POST_ACTION,\n  payload: postId\n});\nexport const updatePostAction = (post, history) => async (dispatch, getState) => {\n  try {\n    await updatePost(post._id, post);\n    dispatch(confirmedUpdatePostAction(post));\n    dispatch(closeDrawer());\n  } catch (error) {\n    console.log('update post action error', error);\n  }\n};\nexport const confirmedUpdatePostAction = post => ({\n  type: CONFIRMED_EDIT_POST_ACTION,\n  payload: post\n});","map":{"version":3,"sources":["/home/neosoft/Desktop/Pankaj/learning/react/blog-app/basic-blog-redux-app/src/Store/actions/post.action.js"],"names":["createPost","deletePost","getPosts","updatePost","CONFIRMED_CREATE_POST_ACTION","CONFIRMED_DELETE_POST_ACTION","CONFIRMED_EDIT_POST_ACTION","CONFIRMED_GET_POSTS","GET_POSTS_BY_TAG","closeDrawer","getPostsAction","dispatch","getState","posts","confirmedGetPostsAction","data","error","console","log","type","payload","getPostActionByTag","tags","createPostAction","postData","history","result","singlePost","lastpost","confirmedCreatePostAction","post","deletePostAction","postId","confirmedDeletePostAction","push","updatePostAction","_id","confirmedUpdatePostAction"],"mappings":"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","sourcesContent":["import { createPost, deletePost, getPosts, updatePost } from 'Services/posts.service'\nimport { CONFIRMED_CREATE_POST_ACTION, CONFIRMED_DELETE_POST_ACTION, CONFIRMED_EDIT_POST_ACTION, CONFIRMED_GET_POSTS, GET_POSTS_BY_TAG } from 'Store/constants/post.constant'\nimport { closeDrawer } from './common.action'\n\nexport const getPostsAction = () => async (dispatch, getState) => {\n  try {\n    const posts = await getPosts()\n    dispatch(confirmedGetPostsAction(posts.data))\n  } catch (error) {\n    console.log('get post action error', error)\n  }\n}\n\nexport const confirmedGetPostsAction = posts => ({\n  type: CONFIRMED_GET_POSTS,\n  payload: posts,\n})\n\nexport const getPostActionByTag = tags => ({\n  type: GET_POSTS_BY_TAG,\n  payload: tags,\n})\n\nexport const createPostAction = (postData, history) => async (dispatch, getState) => {\n  try {\n    const result = await createPost(postData)\n    const singlePost = result.data.lastpost\n    dispatch(confirmedCreatePostAction(singlePost))\n    dispatch(closeDrawer())\n  } catch (error) {\n    console.log('create post action error', error)\n  }\n}\n\nexport const confirmedCreatePostAction = post => ({\n  type: CONFIRMED_CREATE_POST_ACTION,\n  payload: post,\n})\n\nexport const deletePostAction = (postId, history) => async (dispatch, getState) => {\n  try {\n    await deletePost(postId)\n    dispatch(confirmedDeletePostAction(postId))\n    history.push('/posts')\n  } catch (error) {\n    console.log('delete post action error', error)\n  }\n}\n\nexport const confirmedDeletePostAction = postId => ({\n  type: CONFIRMED_DELETE_POST_ACTION,\n  payload: postId,\n})\n\nexport const updatePostAction = (post, history) => async (dispatch, getState) => {\n  try {\n    await updatePost(post._id, post)\n    dispatch(confirmedUpdatePostAction(post))\n    dispatch(closeDrawer())\n  } catch (error) {\n    console.log('update post action error', error)\n  }\n}\n\nexport const confirmedUpdatePostAction = post => ({\n  type: CONFIRMED_EDIT_POST_ACTION,\n  payload: post,\n})\n"]},"metadata":{},"sourceType":"module"}