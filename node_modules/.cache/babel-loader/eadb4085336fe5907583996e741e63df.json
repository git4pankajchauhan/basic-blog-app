{"ast":null,"code":"import { signup } from 'Services/auth.service';\nimport { errorMessage, successMessage, toggleLoader } from './common.action';\nexport const signupAction = (userdata, history) => async dispatch => {\n  try {\n    const response = await signup(userdata);\n\n    if (response.data.status) {\n      dispatch(successMessage(response.data.message));\n      history.push('/login');\n    } else {\n      dispatch(errorMessage(response.data.message));\n    }\n  } catch (error) {\n    console.log('signup action error:', error);\n    dispatch(errorMessage('Oops! Something went wrong.'));\n  }\n\n  dispatch(toggleLoader(false));\n};\nexport const loginAction = (userdata, history) => {\n  return dispatch => {\n    login(email, password).then(response => {\n      saveTokenInLocalStorage(response.data);\n      runLogoutTimer(dispatch, response.data.expiresIn * 1000, history);\n      dispatch(loginConfirmedAction(response.data));\n      history.push('/');\n    }).catch(error => {\n      const errorMessage = formatError(error.response.data);\n      dispatch(loginFailedAction(errorMessage));\n    });\n  };\n}; // export const confirmedSignupAction = payload => ({\n//   type: SIGNUP_CONFIRMED_ACTION,\n//   payload,\n// })\n// export function signupFailedAction(message) {\n//   return {\n//     type: SIGNUP_FAILED_ACTION,\n//     payload: message,\n//   }\n// }\n// export function logout(history) {\n//   localStorage.removeItem('userDetails')\n//   history.push('/login')\n//   return {\n//     type: LOGOUT_ACTION,\n//   }\n// }\n// export function loginFailedAction(data) {\n//   return {\n//     type: LOGIN_FAILED_ACTION,\n//     payload: data,\n//   }\n// }\n// export function loginConfirmedAction(data) {\n//   return {\n//     type: LOGIN_CONFIRMED_ACTION,\n//     payload: data,\n//   }\n// }\n// export function loadingToggleAction(status) {\n//   return {\n//     type: LOADING_TOGGLE_ACTION,\n//     payload: status,\n//   }\n// }","map":{"version":3,"sources":["/home/neosoft/Desktop/Pankaj/learning/react/blog-app/basic-blog-redux-app/src/Store/actions/auth.action.js"],"names":["signup","errorMessage","successMessage","toggleLoader","signupAction","userdata","history","dispatch","response","data","status","message","push","error","console","log","loginAction","login","email","password","then","saveTokenInLocalStorage","runLogoutTimer","expiresIn","loginConfirmedAction","catch","formatError","loginFailedAction"],"mappings":"AAAA,SAASA,MAAT,QAAuB,uBAAvB;AACA,SAASC,YAAT,EAAuBC,cAAvB,EAAuCC,YAAvC,QAA2D,iBAA3D;AAEA,OAAO,MAAMC,YAAY,GAAG,CAACC,QAAD,EAAWC,OAAX,KAAuB,MAAMC,QAAN,IAAkB;AACnE,MAAI;AACF,UAAMC,QAAQ,GAAG,MAAMR,MAAM,CAACK,QAAD,CAA7B;;AAEA,QAAIG,QAAQ,CAACC,IAAT,CAAcC,MAAlB,EAA0B;AACxBH,MAAAA,QAAQ,CAACL,cAAc,CAACM,QAAQ,CAACC,IAAT,CAAcE,OAAf,CAAf,CAAR;AACAL,MAAAA,OAAO,CAACM,IAAR,CAAa,QAAb;AACD,KAHD,MAGO;AACLL,MAAAA,QAAQ,CAACN,YAAY,CAACO,QAAQ,CAACC,IAAT,CAAcE,OAAf,CAAb,CAAR;AACD;AACF,GATD,CASE,OAAOE,KAAP,EAAc;AACdC,IAAAA,OAAO,CAACC,GAAR,CAAY,sBAAZ,EAAoCF,KAApC;AACAN,IAAAA,QAAQ,CAACN,YAAY,CAAC,6BAAD,CAAb,CAAR;AACD;;AAEDM,EAAAA,QAAQ,CAACJ,YAAY,CAAC,KAAD,CAAb,CAAR;AACD,CAhBM;AAiBP,OAAO,MAAMa,WAAW,GAAG,CAACX,QAAD,EAAWC,OAAX,KAAuB;AAChD,SAAOC,QAAQ,IAAI;AACjBU,IAAAA,KAAK,CAACC,KAAD,EAAQC,QAAR,CAAL,CACGC,IADH,CACQZ,QAAQ,IAAI;AAChBa,MAAAA,uBAAuB,CAACb,QAAQ,CAACC,IAAV,CAAvB;AACAa,MAAAA,cAAc,CAACf,QAAD,EAAWC,QAAQ,CAACC,IAAT,CAAcc,SAAd,GAA0B,IAArC,EAA2CjB,OAA3C,CAAd;AACAC,MAAAA,QAAQ,CAACiB,oBAAoB,CAAChB,QAAQ,CAACC,IAAV,CAArB,CAAR;AACAH,MAAAA,OAAO,CAACM,IAAR,CAAa,GAAb;AACD,KANH,EAOGa,KAPH,CAOSZ,KAAK,IAAI;AACd,YAAMZ,YAAY,GAAGyB,WAAW,CAACb,KAAK,CAACL,QAAN,CAAeC,IAAhB,CAAhC;AACAF,MAAAA,QAAQ,CAACoB,iBAAiB,CAAC1B,YAAD,CAAlB,CAAR;AACD,KAVH;AAWD,GAZD;AAaD,CAdM,C,CAgBP;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import { signup } from 'Services/auth.service'\nimport { errorMessage, successMessage, toggleLoader } from './common.action'\n\nexport const signupAction = (userdata, history) => async dispatch => {\n  try {\n    const response = await signup(userdata)\n\n    if (response.data.status) {\n      dispatch(successMessage(response.data.message))\n      history.push('/login')\n    } else {\n      dispatch(errorMessage(response.data.message))\n    }\n  } catch (error) {\n    console.log('signup action error:', error)\n    dispatch(errorMessage('Oops! Something went wrong.'))\n  }\n\n  dispatch(toggleLoader(false))\n}\nexport const loginAction = (userdata, history) => {\n  return dispatch => {\n    login(email, password)\n      .then(response => {\n        saveTokenInLocalStorage(response.data)\n        runLogoutTimer(dispatch, response.data.expiresIn * 1000, history)\n        dispatch(loginConfirmedAction(response.data))\n        history.push('/')\n      })\n      .catch(error => {\n        const errorMessage = formatError(error.response.data)\n        dispatch(loginFailedAction(errorMessage))\n      })\n  }\n}\n\n// export const confirmedSignupAction = payload => ({\n//   type: SIGNUP_CONFIRMED_ACTION,\n//   payload,\n// })\n\n// export function signupFailedAction(message) {\n//   return {\n//     type: SIGNUP_FAILED_ACTION,\n//     payload: message,\n//   }\n// }\n\n// export function logout(history) {\n//   localStorage.removeItem('userDetails')\n//   history.push('/login')\n//   return {\n//     type: LOGOUT_ACTION,\n//   }\n// }\n\n// export function loginFailedAction(data) {\n//   return {\n//     type: LOGIN_FAILED_ACTION,\n//     payload: data,\n//   }\n// }\n\n// export function loginConfirmedAction(data) {\n//   return {\n//     type: LOGIN_CONFIRMED_ACTION,\n//     payload: data,\n//   }\n// }\n\n// export function loadingToggleAction(status) {\n//   return {\n//     type: LOADING_TOGGLE_ACTION,\n//     payload: status,\n//   }\n// }\n"]},"metadata":{},"sourceType":"module"}