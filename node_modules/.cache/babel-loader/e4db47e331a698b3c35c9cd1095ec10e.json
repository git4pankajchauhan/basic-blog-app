{"ast":null,"code":"import { login, saveTokenInLocalStorage, signup } from 'Services/auth.service';\nimport { LOGIN_CONFIRMED_ACTION } from 'Store/constants/auth.constant';\nimport { errorMessage, successMessage, toggleLoader } from './common.action';\nexport const signupAction = (userdata, history) => async dispatch => {\n  try {\n    const response = await signup(userdata);\n\n    if (response.data.status) {\n      dispatch(successMessage(response.data.message));\n      history.push('/login');\n    } else {\n      dispatch(errorMessage(response.data.message));\n    }\n  } catch (error) {\n    console.log('signup action error:', error);\n    dispatch(errorMessage('Oops! Something went wrong.'));\n  }\n\n  dispatch(toggleLoader(false));\n};\nexport const loginAction = (userdata, history) => async dispatch => {\n  try {\n    const response = await login(userdata);\n\n    if (response.data.status) {\n      const {\n        isAuth,\n        token,\n        user\n      } = response.data;\n      saveTokenInLocalStorage({\n        isAuth,\n        token,\n        user\n      });\n      dispatch(loginConfirmedAction({\n        isAuth,\n        token,\n        user\n      })); // history.push('/posts')\n    } else {\n      dispatch(errorMessage(response.data.message));\n    }\n  } catch (error) {\n    console.log('login action error:', error);\n    dispatch(errorMessage('Oops! Something went wrong.'));\n  }\n\n  dispatch(toggleLoader(false)); // login(email, password)\n  //   .then(response => {\n  //     saveTokenInLocalStorage(response.data)\n  //     runLogoutTimer(dispatch, response.data.expiresIn * 1000, history)\n  //     dispatch(loginConfirmedAction(response.data))\n  //     history.push('/')\n  //   })\n  //   .catch(error => {\n  //     const errorMessage = formatError(error.response.data)\n  //     dispatch(loginFailedAction(errorMessage))\n  //   })\n};\nexport function loginConfirmedAction(data) {\n  return {\n    type: LOGIN_CONFIRMED_ACTION,\n    payload: data\n  };\n} // export function logout(history) {\n//   localStorage.removeItem('userDetails')\n//   history.push('/login')\n//   return {\n//     type: LOGOUT_ACTION,\n//   }\n// }\n// export function loginFailedAction(data) {\n//   return {\n//     type: LOGIN_FAILED_ACTION,\n//     payload: data,\n//   }\n// }\n// export function loadingToggleAction(status) {\n//   return {\n//     type: LOADING_TOGGLE_ACTION,\n//     payload: status,\n//   }\n// }\n\nexport function runLogoutTimer(dispatch, timer, history) {\n  setTimeout(() => {\n    dispatch(logout(history));\n  }, timer);\n}\nexport function checkAutoLogin(dispatch, history) {\n  const tokenDetailsString = localStorage.getItem('userDetails');\n  let tokenDetails = '';\n\n  if (!tokenDetailsString) {\n    dispatch(logout(history));\n    return;\n  }\n\n  tokenDetails = JSON.parse(tokenDetailsString);\n  let expireDate = new Date(tokenDetails.expireDate);\n  let todaysDate = new Date();\n\n  if (todaysDate > expireDate) {\n    dispatch(logout(history));\n    return;\n  }\n\n  dispatch(loginConfirmedAction(tokenDetails));\n  const timer = expireDate.getTime() - todaysDate.getTime();\n  runLogoutTimer(dispatch, timer, history);\n}","map":{"version":3,"sources":["/home/neosoft/Desktop/Pankaj/learning/react/blog-app/basic-blog-redux-app/src/Store/actions/auth.action.js"],"names":["login","saveTokenInLocalStorage","signup","LOGIN_CONFIRMED_ACTION","errorMessage","successMessage","toggleLoader","signupAction","userdata","history","dispatch","response","data","status","message","push","error","console","log","loginAction","isAuth","token","user","loginConfirmedAction","type","payload","runLogoutTimer","timer","setTimeout","logout","checkAutoLogin","tokenDetailsString","localStorage","getItem","tokenDetails","JSON","parse","expireDate","Date","todaysDate","getTime"],"mappings":"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","sourcesContent":["import { login, saveTokenInLocalStorage, signup } from 'Services/auth.service'\nimport { LOGIN_CONFIRMED_ACTION } from 'Store/constants/auth.constant'\nimport { errorMessage, successMessage, toggleLoader } from './common.action'\n\nexport const signupAction = (userdata, history) => async dispatch => {\n  try {\n    const response = await signup(userdata)\n\n    if (response.data.status) {\n      dispatch(successMessage(response.data.message))\n      history.push('/login')\n    } else {\n      dispatch(errorMessage(response.data.message))\n    }\n  } catch (error) {\n    console.log('signup action error:', error)\n    dispatch(errorMessage('Oops! Something went wrong.'))\n  }\n\n  dispatch(toggleLoader(false))\n}\nexport const loginAction = (userdata, history) => async dispatch => {\n  try {\n    const response = await login(userdata)\n    if (response.data.status) {\n      const { isAuth, token, user } = response.data\n      saveTokenInLocalStorage({ isAuth, token, user })\n      dispatch(loginConfirmedAction({ isAuth, token, user }))\n      // history.push('/posts')\n    } else {\n      dispatch(errorMessage(response.data.message))\n    }\n  } catch (error) {\n    console.log('login action error:', error)\n    dispatch(errorMessage('Oops! Something went wrong.'))\n  }\n\n  dispatch(toggleLoader(false))\n  // login(email, password)\n  //   .then(response => {\n  //     saveTokenInLocalStorage(response.data)\n  //     runLogoutTimer(dispatch, response.data.expiresIn * 1000, history)\n  //     dispatch(loginConfirmedAction(response.data))\n  //     history.push('/')\n  //   })\n  //   .catch(error => {\n  //     const errorMessage = formatError(error.response.data)\n  //     dispatch(loginFailedAction(errorMessage))\n  //   })\n}\n\nexport function loginConfirmedAction(data) {\n  return {\n    type: LOGIN_CONFIRMED_ACTION,\n    payload: data,\n  }\n}\n\n// export function logout(history) {\n//   localStorage.removeItem('userDetails')\n//   history.push('/login')\n//   return {\n//     type: LOGOUT_ACTION,\n//   }\n// }\n\n// export function loginFailedAction(data) {\n//   return {\n//     type: LOGIN_FAILED_ACTION,\n//     payload: data,\n//   }\n// }\n\n// export function loadingToggleAction(status) {\n//   return {\n//     type: LOADING_TOGGLE_ACTION,\n//     payload: status,\n//   }\n// }\n\nexport function runLogoutTimer(dispatch, timer, history) {\n  setTimeout(() => {\n    dispatch(logout(history))\n  }, timer)\n}\n\nexport function checkAutoLogin(dispatch, history) {\n  const tokenDetailsString = localStorage.getItem('userDetails')\n  let tokenDetails = ''\n  if (!tokenDetailsString) {\n    dispatch(logout(history))\n    return\n  }\n\n  tokenDetails = JSON.parse(tokenDetailsString)\n  let expireDate = new Date(tokenDetails.expireDate)\n  let todaysDate = new Date()\n\n  if (todaysDate > expireDate) {\n    dispatch(logout(history))\n    return\n  }\n  dispatch(loginConfirmedAction(tokenDetails))\n\n  const timer = expireDate.getTime() - todaysDate.getTime()\n  runLogoutTimer(dispatch, timer, history)\n}\n"]},"metadata":{},"sourceType":"module"}