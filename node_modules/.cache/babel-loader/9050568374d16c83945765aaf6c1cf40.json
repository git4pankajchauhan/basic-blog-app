{"ast":null,"code":"import { loginConfirmedAction, logout } from 'Store/actions/auth.action';\nimport axiosInstance from './axiosInstance';\nexport const signup = userdata => axiosInstance.post(`/user/signup`, userdata);\nexport const login = userdata => axiosInstance.post(`/user/login`, userdata);\nexport const saveTokenInLocalStorage = token => {\n  token.expireDate = new Date(new Date().getTime() + token.expiresIn * 1000);\n  localStorage.setItem('userToken', JSON.stringify(token));\n};\nexport function runLogoutTimer(dispatch, timer, history) {\n  setTimeout(() => {\n    dispatch(logout(history));\n  }, timer);\n}\nexport function checkAutoLogin(dispatch, history) {\n  const tokenDetailsString = localStorage.getItem('userToken');\n  let tokenDetails = '';\n\n  if (!tokenDetailsString) {\n    dispatch(logout(history));\n    return;\n  }\n\n  tokenDetails = JSON.parse(tokenDetailsString);\n  let expireDate = new Date(tokenDetails.expireDate);\n  let todaysDate = new Date();\n\n  if (todaysDate > expireDate) {\n    dispatch(logout(history));\n    return;\n  }\n\n  dispatch(loginConfirmedAction(tokenDetails));\n  const timer = expireDate.getTime() - todaysDate.getTime();\n  runLogoutTimer(dispatch, timer, history);\n}","map":{"version":3,"sources":["/home/neosoft/Desktop/Pankaj/learning/react/blog-app/basic-blog-redux-app/src/Services/auth.service.js"],"names":["loginConfirmedAction","logout","axiosInstance","signup","userdata","post","login","saveTokenInLocalStorage","token","expireDate","Date","getTime","expiresIn","localStorage","setItem","JSON","stringify","runLogoutTimer","dispatch","timer","history","setTimeout","checkAutoLogin","tokenDetailsString","getItem","tokenDetails","parse","todaysDate"],"mappings":"AAAA,SAASA,oBAAT,EAA+BC,MAA/B,QAA6C,2BAA7C;AACA,OAAOC,aAAP,MAA0B,iBAA1B;AAEA,OAAO,MAAMC,MAAM,GAAGC,QAAQ,IAAIF,aAAa,CAACG,IAAd,CAAoB,cAApB,EAAmCD,QAAnC,CAA3B;AAEP,OAAO,MAAME,KAAK,GAAGF,QAAQ,IAAIF,aAAa,CAACG,IAAd,CAAoB,aAApB,EAAkCD,QAAlC,CAA1B;AAEP,OAAO,MAAMG,uBAAuB,GAAGC,KAAK,IAAI;AAC9CA,EAAAA,KAAK,CAACC,UAAN,GAAmB,IAAIC,IAAJ,CAAS,IAAIA,IAAJ,GAAWC,OAAX,KAAuBH,KAAK,CAACI,SAAN,GAAkB,IAAlD,CAAnB;AACAC,EAAAA,YAAY,CAACC,OAAb,CAAqB,WAArB,EAAkCC,IAAI,CAACC,SAAL,CAAeR,KAAf,CAAlC;AACD,CAHM;AAKP,OAAO,SAASS,cAAT,CAAwBC,QAAxB,EAAkCC,KAAlC,EAAyCC,OAAzC,EAAkD;AACvDC,EAAAA,UAAU,CAAC,MAAM;AACfH,IAAAA,QAAQ,CAACjB,MAAM,CAACmB,OAAD,CAAP,CAAR;AACD,GAFS,EAEPD,KAFO,CAAV;AAGD;AAED,OAAO,SAASG,cAAT,CAAwBJ,QAAxB,EAAkCE,OAAlC,EAA2C;AAChD,QAAMG,kBAAkB,GAAGV,YAAY,CAACW,OAAb,CAAqB,WAArB,CAA3B;AACA,MAAIC,YAAY,GAAG,EAAnB;;AAEA,MAAI,CAACF,kBAAL,EAAyB;AACvBL,IAAAA,QAAQ,CAACjB,MAAM,CAACmB,OAAD,CAAP,CAAR;AACA;AACD;;AAEDK,EAAAA,YAAY,GAAGV,IAAI,CAACW,KAAL,CAAWH,kBAAX,CAAf;AACA,MAAId,UAAU,GAAG,IAAIC,IAAJ,CAASe,YAAY,CAAChB,UAAtB,CAAjB;AACA,MAAIkB,UAAU,GAAG,IAAIjB,IAAJ,EAAjB;;AAEA,MAAIiB,UAAU,GAAGlB,UAAjB,EAA6B;AAC3BS,IAAAA,QAAQ,CAACjB,MAAM,CAACmB,OAAD,CAAP,CAAR;AACA;AACD;;AACDF,EAAAA,QAAQ,CAAClB,oBAAoB,CAACyB,YAAD,CAArB,CAAR;AAEA,QAAMN,KAAK,GAAGV,UAAU,CAACE,OAAX,KAAuBgB,UAAU,CAAChB,OAAX,EAArC;AACAM,EAAAA,cAAc,CAACC,QAAD,EAAWC,KAAX,EAAkBC,OAAlB,CAAd;AACD","sourcesContent":["import { loginConfirmedAction, logout } from 'Store/actions/auth.action'\nimport axiosInstance from './axiosInstance'\n\nexport const signup = userdata => axiosInstance.post(`/user/signup`, userdata)\n\nexport const login = userdata => axiosInstance.post(`/user/login`, userdata)\n\nexport const saveTokenInLocalStorage = token => {\n  token.expireDate = new Date(new Date().getTime() + token.expiresIn * 1000)\n  localStorage.setItem('userToken', JSON.stringify(token))\n}\n\nexport function runLogoutTimer(dispatch, timer, history) {\n  setTimeout(() => {\n    dispatch(logout(history))\n  }, timer)\n}\n\nexport function checkAutoLogin(dispatch, history) {\n  const tokenDetailsString = localStorage.getItem('userToken')\n  let tokenDetails = ''\n\n  if (!tokenDetailsString) {\n    dispatch(logout(history))\n    return\n  }\n\n  tokenDetails = JSON.parse(tokenDetailsString)\n  let expireDate = new Date(tokenDetails.expireDate)\n  let todaysDate = new Date()\n\n  if (todaysDate > expireDate) {\n    dispatch(logout(history))\n    return\n  }\n  dispatch(loginConfirmedAction(tokenDetails))\n\n  const timer = expireDate.getTime() - todaysDate.getTime()\n  runLogoutTimer(dispatch, timer, history)\n}\n"]},"metadata":{},"sourceType":"module"}