{"ast":null,"code":"import { post_type } from 'Store/constants';\nconst initialState = {\n  posts: [],\n  post: []\n};\nexport default function PostsReducer(state = initialState, {\n  type,\n  payload\n}) {\n  if (type === post_type.GET_POSTS) {\n    return { ...state,\n      posts: payload\n    };\n  }\n\n  if (type === post_type.CREATE_POST) {\n    const posts = [...state.posts, payload];\n    return { ...state,\n      posts\n    };\n  }\n\n  if (type === post_type.DELETE_POST) {\n    const posts = [...state.posts];\n    const postIndex = posts.findIndex(post => post._id === payload);\n    posts.splice(postIndex, 1);\n    return { ...state,\n      posts\n    };\n  }\n\n  if (type === post_type.UPDATE_POST) {\n    const posts = [...state.posts];\n    const postIndex = posts.findIndex(post => post._id === payload._id);\n    posts[postIndex] = payload;\n    return { ...state,\n      posts\n    };\n  }\n\n  if (type === post_type.GET_FILTERED_POSTS) {\n    const posts = [...state.posts];\n    const filtered_posts = posts.filter(post => post.tags.includes(payload));\n    return { ...state,\n      posts: filtered_posts\n    };\n  }\n\n  if (type === post_type.GET_SINGLE_POST) {\n    const post = posts.find(post => post._id === payload);\n    return { ...state,\n      post\n    };\n  } // if (type === post_type.GET_SINGLE_POST) {\n  //   const posts = [...state.posts]\n  //   const post = posts.find(post => post._id === payload)\n  //   return {\n  //     ...state,\n  //     post,\n  //   }\n  // }\n\n\n  return state;\n}\n_c = PostsReducer;\n\nvar _c;\n\n$RefreshReg$(_c, \"PostsReducer\");","map":{"version":3,"sources":["/home/neosoft/Desktop/Pankaj/learning/react/blog-app/basic-blog-redux-app/src/Store/reducers/posts.reducer.js"],"names":["post_type","initialState","posts","post","PostsReducer","state","type","payload","GET_POSTS","CREATE_POST","DELETE_POST","postIndex","findIndex","_id","splice","UPDATE_POST","GET_FILTERED_POSTS","filtered_posts","filter","tags","includes","GET_SINGLE_POST","find"],"mappings":"AAAA,SAASA,SAAT,QAA0B,iBAA1B;AAEA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,KAAK,EAAE,EADY;AAEnBC,EAAAA,IAAI,EAAE;AAFa,CAArB;AAKA,eAAe,SAASC,YAAT,CAAsBC,KAAK,GAAGJ,YAA9B,EAA4C;AAAEK,EAAAA,IAAF;AAAQC,EAAAA;AAAR,CAA5C,EAA+D;AAC5E,MAAID,IAAI,KAAKN,SAAS,CAACQ,SAAvB,EAAkC;AAChC,WAAO,EACL,GAAGH,KADE;AAELH,MAAAA,KAAK,EAAEK;AAFF,KAAP;AAID;;AAED,MAAID,IAAI,KAAKN,SAAS,CAACS,WAAvB,EAAoC;AAClC,UAAMP,KAAK,GAAG,CAAC,GAAGG,KAAK,CAACH,KAAV,EAAiBK,OAAjB,CAAd;AACA,WAAO,EACL,GAAGF,KADE;AAELH,MAAAA;AAFK,KAAP;AAID;;AAED,MAAII,IAAI,KAAKN,SAAS,CAACU,WAAvB,EAAoC;AAClC,UAAMR,KAAK,GAAG,CAAC,GAAGG,KAAK,CAACH,KAAV,CAAd;AACA,UAAMS,SAAS,GAAGT,KAAK,CAACU,SAAN,CAAgBT,IAAI,IAAIA,IAAI,CAACU,GAAL,KAAaN,OAArC,CAAlB;AACAL,IAAAA,KAAK,CAACY,MAAN,CAAaH,SAAb,EAAwB,CAAxB;AACA,WAAO,EACL,GAAGN,KADE;AAELH,MAAAA;AAFK,KAAP;AAID;;AAED,MAAII,IAAI,KAAKN,SAAS,CAACe,WAAvB,EAAoC;AAClC,UAAMb,KAAK,GAAG,CAAC,GAAGG,KAAK,CAACH,KAAV,CAAd;AACA,UAAMS,SAAS,GAAGT,KAAK,CAACU,SAAN,CAAgBT,IAAI,IAAIA,IAAI,CAACU,GAAL,KAAaN,OAAO,CAACM,GAA7C,CAAlB;AAEAX,IAAAA,KAAK,CAACS,SAAD,CAAL,GAAmBJ,OAAnB;AACA,WAAO,EACL,GAAGF,KADE;AAELH,MAAAA;AAFK,KAAP;AAID;;AAED,MAAII,IAAI,KAAKN,SAAS,CAACgB,kBAAvB,EAA2C;AACzC,UAAMd,KAAK,GAAG,CAAC,GAAGG,KAAK,CAACH,KAAV,CAAd;AACA,UAAMe,cAAc,GAAGf,KAAK,CAACgB,MAAN,CAAaf,IAAI,IAAIA,IAAI,CAACgB,IAAL,CAAUC,QAAV,CAAmBb,OAAnB,CAArB,CAAvB;AACA,WAAO,EACL,GAAGF,KADE;AAELH,MAAAA,KAAK,EAAEe;AAFF,KAAP;AAID;;AAED,MAAIX,IAAI,KAAKN,SAAS,CAACqB,eAAvB,EAAwC;AACtC,UAAMlB,IAAI,GAAGD,KAAK,CAACoB,IAAN,CAAWnB,IAAI,IAAIA,IAAI,CAACU,GAAL,KAAaN,OAAhC,CAAb;AACA,WAAO,EACL,GAAGF,KADE;AAELF,MAAAA;AAFK,KAAP;AAID,GApD2E,CAsD5E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,SAAOE,KAAP;AACD;KAhEuBD,Y","sourcesContent":["import { post_type } from 'Store/constants'\n\nconst initialState = {\n  posts: [],\n  post: [],\n}\n\nexport default function PostsReducer(state = initialState, { type, payload }) {\n  if (type === post_type.GET_POSTS) {\n    return {\n      ...state,\n      posts: payload,\n    }\n  }\n\n  if (type === post_type.CREATE_POST) {\n    const posts = [...state.posts, payload]\n    return {\n      ...state,\n      posts,\n    }\n  }\n\n  if (type === post_type.DELETE_POST) {\n    const posts = [...state.posts]\n    const postIndex = posts.findIndex(post => post._id === payload)\n    posts.splice(postIndex, 1)\n    return {\n      ...state,\n      posts,\n    }\n  }\n\n  if (type === post_type.UPDATE_POST) {\n    const posts = [...state.posts]\n    const postIndex = posts.findIndex(post => post._id === payload._id)\n\n    posts[postIndex] = payload\n    return {\n      ...state,\n      posts,\n    }\n  }\n\n  if (type === post_type.GET_FILTERED_POSTS) {\n    const posts = [...state.posts]\n    const filtered_posts = posts.filter(post => post.tags.includes(payload))\n    return {\n      ...state,\n      posts: filtered_posts,\n    }\n  }\n\n  if (type === post_type.GET_SINGLE_POST) {\n    const post = posts.find(post => post._id === payload)\n    return {\n      ...state,\n      post,\n    }\n  }\n\n  // if (type === post_type.GET_SINGLE_POST) {\n  //   const posts = [...state.posts]\n  //   const post = posts.find(post => post._id === payload)\n  //   return {\n  //     ...state,\n  //     post,\n  //   }\n  // }\n\n  return state\n}\n"]},"metadata":{},"sourceType":"module"}