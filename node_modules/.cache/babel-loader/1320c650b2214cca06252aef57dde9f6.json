{"ast":null,"code":"import { createPost, deletePost, getPosts, getSinglePost, updatePost } from 'Services/posts.service';\nimport { CONFIRMED_CREATE_POST_ACTION, CONFIRMED_DELETE_POST_ACTION, CONFIRMED_EDIT_POST_ACTION, CONFIRMED_GET_POSTS, GET_POSTS_BY_TAG, GET_SINGLE_POST } from 'Store/constants/post.constant';\nimport { getPost } from 'Store/selectors/Post.selectors';\nimport { closeDrawer } from './common.action'; // get posts from api\n\nexport const getPostsAction = () => async (dispatch, getState) => {\n  try {\n    const posts = await getPosts();\n    dispatch(confirmedGetPostsAction(posts.data));\n  } catch (error) {\n    console.log('get post action error', error);\n  }\n}; // get post from store\n\nexport const confirmedGetPostsAction = posts => ({\n  type: CONFIRMED_GET_POSTS,\n  payload: posts\n}); // get filtered post from store\n\nexport const getPostActionByTag = tags => ({\n  type: GET_POSTS_BY_TAG,\n  payload: tags\n}); // get single post from api\n\nexport const getSinglePostAction = id => async dispatch => {\n  try {\n    const post = await getSinglePost(id);\n    dispatch();\n  } catch (e) {}\n}; // get single post from store\n\nexport const confirmGetSinglePostAction = id => ({\n  type: GET_SINGLE_POST,\n  payload: id\n});\nexport const createPostAction = postData => async (dispatch, getState) => {\n  try {\n    const result = await createPost(postData);\n    const singlePost = result.data.lastpost;\n    dispatch(confirmedCreatePostAction(singlePost));\n    dispatch(closeDrawer());\n  } catch (error) {\n    console.log('create post action error', error);\n  }\n};\nexport const confirmedCreatePostAction = post => ({\n  type: CONFIRMED_CREATE_POST_ACTION,\n  payload: post\n});\nexport const deletePostAction = postId => async (dispatch, getState) => {\n  try {\n    await deletePost(postId);\n    dispatch(confirmedDeletePostAction(postId));\n  } catch (error) {\n    console.log('delete post action error', error);\n  }\n};\nexport const confirmedDeletePostAction = postId => ({\n  type: CONFIRMED_DELETE_POST_ACTION,\n  payload: postId\n});\nexport const updatePostAction = post => async (dispatch, getState) => {\n  try {\n    await updatePost(post._id, post);\n    dispatch(confirmedUpdatePostAction(post));\n    dispatch(closeDrawer());\n  } catch (error) {\n    console.log('update post action error', error);\n  }\n};\nexport const confirmedUpdatePostAction = post => ({\n  type: CONFIRMED_EDIT_POST_ACTION,\n  payload: post\n});","map":{"version":3,"sources":["/home/neosoft/Desktop/Pankaj/learning/react/blog-app/basic-blog-redux-app/src/Store/actions/post.action.js"],"names":["createPost","deletePost","getPosts","getSinglePost","updatePost","CONFIRMED_CREATE_POST_ACTION","CONFIRMED_DELETE_POST_ACTION","CONFIRMED_EDIT_POST_ACTION","CONFIRMED_GET_POSTS","GET_POSTS_BY_TAG","GET_SINGLE_POST","getPost","closeDrawer","getPostsAction","dispatch","getState","posts","confirmedGetPostsAction","data","error","console","log","type","payload","getPostActionByTag","tags","getSinglePostAction","id","post","e","confirmGetSinglePostAction","createPostAction","postData","result","singlePost","lastpost","confirmedCreatePostAction","deletePostAction","postId","confirmedDeletePostAction","updatePostAction","_id","confirmedUpdatePostAction"],"mappings":"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","sourcesContent":["import { createPost, deletePost, getPosts, getSinglePost, updatePost } from 'Services/posts.service'\nimport { CONFIRMED_CREATE_POST_ACTION, CONFIRMED_DELETE_POST_ACTION, CONFIRMED_EDIT_POST_ACTION, CONFIRMED_GET_POSTS, GET_POSTS_BY_TAG, GET_SINGLE_POST } from 'Store/constants/post.constant'\nimport { getPost } from 'Store/selectors/Post.selectors'\nimport { closeDrawer } from './common.action'\n\n// get posts from api\nexport const getPostsAction = () => async (dispatch, getState) => {\n  try {\n    const posts = await getPosts()\n    dispatch(confirmedGetPostsAction(posts.data))\n  } catch (error) {\n    console.log('get post action error', error)\n  }\n}\n// get post from store\nexport const confirmedGetPostsAction = posts => ({\n  type: CONFIRMED_GET_POSTS,\n  payload: posts,\n})\n// get filtered post from store\nexport const getPostActionByTag = tags => ({\n  type: GET_POSTS_BY_TAG,\n  payload: tags,\n})\n// get single post from api\nexport const getSinglePostAction = id => async dispatch => {\n  try {\n    const post = await getSinglePost(id)\n    dispatch()\n  } catch (e) {}\n}\n// get single post from store\nexport const confirmGetSinglePostAction = id => ({\n  type: GET_SINGLE_POST,\n  payload: id,\n})\n\nexport const createPostAction = postData => async (dispatch, getState) => {\n  try {\n    const result = await createPost(postData)\n    const singlePost = result.data.lastpost\n    dispatch(confirmedCreatePostAction(singlePost))\n    dispatch(closeDrawer())\n  } catch (error) {\n    console.log('create post action error', error)\n  }\n}\n\nexport const confirmedCreatePostAction = post => ({\n  type: CONFIRMED_CREATE_POST_ACTION,\n  payload: post,\n})\n\nexport const deletePostAction = postId => async (dispatch, getState) => {\n  try {\n    await deletePost(postId)\n    dispatch(confirmedDeletePostAction(postId))\n  } catch (error) {\n    console.log('delete post action error', error)\n  }\n}\n\nexport const confirmedDeletePostAction = postId => ({\n  type: CONFIRMED_DELETE_POST_ACTION,\n  payload: postId,\n})\n\nexport const updatePostAction = post => async (dispatch, getState) => {\n  try {\n    await updatePost(post._id, post)\n    dispatch(confirmedUpdatePostAction(post))\n    dispatch(closeDrawer())\n  } catch (error) {\n    console.log('update post action error', error)\n  }\n}\n\nexport const confirmedUpdatePostAction = post => ({\n  type: CONFIRMED_EDIT_POST_ACTION,\n  payload: post,\n})\n"]},"metadata":{},"sourceType":"module"}