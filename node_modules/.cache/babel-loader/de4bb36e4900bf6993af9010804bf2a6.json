{"ast":null,"code":"import { createPost, deletePost, getPosts, getSinglePost, updatePost } from 'Services/posts.service';\nimport { post_type } from 'Store/constants/post.constant'; // import { CONFIRMED_CREATE_POST_ACTION, CONFIRMED_DELETE_POST_ACTION, CONFIRMED_EDIT_POST_ACTION, CONFIRMED_GET_POST, CONFIRMED_GET_POSTS, GET_POSTS_BY_TAG, GET_SINGLE_POST, SET_SINGLE_POST } from 'Store/constants/post.constant'\n\nimport { closeDrawer } from './common.action'; // get all posts from api and store\n\nexport const getAllPostsAction = () => async (dispatch, getState) => {\n  try {\n    const posts = await getPosts();\n    const postsdata = posts.data;\n    dispatch({\n      type: post_type.GET_POSTS,\n      payload: postsdata\n    });\n  } catch (error) {\n    console.log('get post action error', error);\n  }\n}; // get single post from api and store\n\nexport const getSinglePostAction = id => async dispatch => {\n  try {\n    const post = await getSinglePost(id);\n    const postdata = post.data;\n    dispatch({\n      type: post_type.GET_SINGLE_POST,\n      payload: postdata\n    });\n  } catch (error) {\n    console.log('get post action error', error);\n  }\n}; // create new post api and store\n\nexport const createPostAction = postData => async (dispatch, getState) => {\n  try {\n    const result = await createPost(postData);\n    const post = result.data.lastpost;\n    dispatch({\n      type: post_type.CREATE_POST,\n      payload: post\n    });\n    dispatch(closeDrawer());\n  } catch (error) {\n    console.log('create post action error', error);\n  }\n}; // delete post from api and store\n\nexport const deletePostAction = postId => async (dispatch, getState) => {\n  try {\n    await deletePost(postId);\n    dispatch({\n      type: post_type.DELETE_POST,\n      payload: postId\n    });\n  } catch (error) {\n    console.log('delete post action error', error);\n  }\n}; // update post from api and store\n\nexport const updatePostAction = post => async (dispatch, getState) => {\n  try {\n    await updatePost(post._id, post);\n    dispatch({\n      type: post_type.UPDATE_POST,\n      payload: post\n    });\n    dispatch(closeDrawer());\n  } catch (error) {\n    console.log('update post action error', error);\n  }\n};","map":{"version":3,"sources":["/home/neosoft/Desktop/Pankaj/learning/react/blog-app/basic-blog-redux-app/src/Store/actions/post.action.js"],"names":["createPost","deletePost","getPosts","getSinglePost","updatePost","post_type","closeDrawer","getAllPostsAction","dispatch","getState","posts","postsdata","data","type","GET_POSTS","payload","error","console","log","getSinglePostAction","id","post","postdata","GET_SINGLE_POST","createPostAction","postData","result","lastpost","CREATE_POST","deletePostAction","postId","DELETE_POST","updatePostAction","_id","UPDATE_POST"],"mappings":"AAAA,SAASA,UAAT,EAAqBC,UAArB,EAAiCC,QAAjC,EAA2CC,aAA3C,EAA0DC,UAA1D,QAA4E,wBAA5E;AACA,SAASC,SAAT,QAA0B,+BAA1B,C,CACA;;AACA,SAASC,WAAT,QAA4B,iBAA5B,C,CAEA;;AACA,OAAO,MAAMC,iBAAiB,GAAG,MAAM,OAAOC,QAAP,EAAiBC,QAAjB,KAA8B;AACnE,MAAI;AACF,UAAMC,KAAK,GAAG,MAAMR,QAAQ,EAA5B;AACA,UAAMS,SAAS,GAAGD,KAAK,CAACE,IAAxB;AACAJ,IAAAA,QAAQ,CAAC;AACPK,MAAAA,IAAI,EAAER,SAAS,CAACS,SADT;AAEPC,MAAAA,OAAO,EAAEJ;AAFF,KAAD,CAAR;AAID,GAPD,CAOE,OAAOK,KAAP,EAAc;AACdC,IAAAA,OAAO,CAACC,GAAR,CAAY,uBAAZ,EAAqCF,KAArC;AACD;AACF,CAXM,C,CAaP;;AACA,OAAO,MAAMG,mBAAmB,GAAGC,EAAE,IAAI,MAAMZ,QAAN,IAAkB;AACzD,MAAI;AACF,UAAMa,IAAI,GAAG,MAAMlB,aAAa,CAACiB,EAAD,CAAhC;AACA,UAAME,QAAQ,GAAGD,IAAI,CAACT,IAAtB;AACAJ,IAAAA,QAAQ,CAAC;AACPK,MAAAA,IAAI,EAAER,SAAS,CAACkB,eADT;AAEPR,MAAAA,OAAO,EAAEO;AAFF,KAAD,CAAR;AAID,GAPD,CAOE,OAAON,KAAP,EAAc;AACdC,IAAAA,OAAO,CAACC,GAAR,CAAY,uBAAZ,EAAqCF,KAArC;AACD;AACF,CAXM,C,CAaP;;AACA,OAAO,MAAMQ,gBAAgB,GAAGC,QAAQ,IAAI,OAAOjB,QAAP,EAAiBC,QAAjB,KAA8B;AACxE,MAAI;AACF,UAAMiB,MAAM,GAAG,MAAM1B,UAAU,CAACyB,QAAD,CAA/B;AACA,UAAMJ,IAAI,GAAGK,MAAM,CAACd,IAAP,CAAYe,QAAzB;AACAnB,IAAAA,QAAQ,CAAC;AACPK,MAAAA,IAAI,EAAER,SAAS,CAACuB,WADT;AAEPb,MAAAA,OAAO,EAAEM;AAFF,KAAD,CAAR;AAIAb,IAAAA,QAAQ,CAACF,WAAW,EAAZ,CAAR;AACD,GARD,CAQE,OAAOU,KAAP,EAAc;AACdC,IAAAA,OAAO,CAACC,GAAR,CAAY,0BAAZ,EAAwCF,KAAxC;AACD;AACF,CAZM,C,CAcP;;AACA,OAAO,MAAMa,gBAAgB,GAAGC,MAAM,IAAI,OAAOtB,QAAP,EAAiBC,QAAjB,KAA8B;AACtE,MAAI;AACF,UAAMR,UAAU,CAAC6B,MAAD,CAAhB;AACAtB,IAAAA,QAAQ,CAAC;AACPK,MAAAA,IAAI,EAAER,SAAS,CAAC0B,WADT;AAEPhB,MAAAA,OAAO,EAAEe;AAFF,KAAD,CAAR;AAID,GAND,CAME,OAAOd,KAAP,EAAc;AACdC,IAAAA,OAAO,CAACC,GAAR,CAAY,0BAAZ,EAAwCF,KAAxC;AACD;AACF,CAVM,C,CAYP;;AACA,OAAO,MAAMgB,gBAAgB,GAAGX,IAAI,IAAI,OAAOb,QAAP,EAAiBC,QAAjB,KAA8B;AACpE,MAAI;AACF,UAAML,UAAU,CAACiB,IAAI,CAACY,GAAN,EAAWZ,IAAX,CAAhB;AACAb,IAAAA,QAAQ,CAAC;AACPK,MAAAA,IAAI,EAAER,SAAS,CAAC6B,WADT;AAEPnB,MAAAA,OAAO,EAAEM;AAFF,KAAD,CAAR;AAIAb,IAAAA,QAAQ,CAACF,WAAW,EAAZ,CAAR;AACD,GAPD,CAOE,OAAOU,KAAP,EAAc;AACdC,IAAAA,OAAO,CAACC,GAAR,CAAY,0BAAZ,EAAwCF,KAAxC;AACD;AACF,CAXM","sourcesContent":["import { createPost, deletePost, getPosts, getSinglePost, updatePost } from 'Services/posts.service'\nimport { post_type } from 'Store/constants/post.constant'\n// import { CONFIRMED_CREATE_POST_ACTION, CONFIRMED_DELETE_POST_ACTION, CONFIRMED_EDIT_POST_ACTION, CONFIRMED_GET_POST, CONFIRMED_GET_POSTS, GET_POSTS_BY_TAG, GET_SINGLE_POST, SET_SINGLE_POST } from 'Store/constants/post.constant'\nimport { closeDrawer } from './common.action'\n\n// get all posts from api and store\nexport const getAllPostsAction = () => async (dispatch, getState) => {\n  try {\n    const posts = await getPosts()\n    const postsdata = posts.data\n    dispatch({\n      type: post_type.GET_POSTS,\n      payload: postsdata,\n    })\n  } catch (error) {\n    console.log('get post action error', error)\n  }\n}\n\n// get single post from api and store\nexport const getSinglePostAction = id => async dispatch => {\n  try {\n    const post = await getSinglePost(id)\n    const postdata = post.data\n    dispatch({\n      type: post_type.GET_SINGLE_POST,\n      payload: postdata,\n    })\n  } catch (error) {\n    console.log('get post action error', error)\n  }\n}\n\n// create new post api and store\nexport const createPostAction = postData => async (dispatch, getState) => {\n  try {\n    const result = await createPost(postData)\n    const post = result.data.lastpost\n    dispatch({\n      type: post_type.CREATE_POST,\n      payload: post,\n    })\n    dispatch(closeDrawer())\n  } catch (error) {\n    console.log('create post action error', error)\n  }\n}\n\n// delete post from api and store\nexport const deletePostAction = postId => async (dispatch, getState) => {\n  try {\n    await deletePost(postId)\n    dispatch({\n      type: post_type.DELETE_POST,\n      payload: postId,\n    })\n  } catch (error) {\n    console.log('delete post action error', error)\n  }\n}\n\n// update post from api and store\nexport const updatePostAction = post => async (dispatch, getState) => {\n  try {\n    await updatePost(post._id, post)\n    dispatch({\n      type: post_type.UPDATE_POST,\n      payload: post,\n    })\n    dispatch(closeDrawer())\n  } catch (error) {\n    console.log('update post action error', error)\n  }\n}\n"]},"metadata":{},"sourceType":"module"}