{"ast":null,"code":"import { post_type } from 'Store/constants';\nconst initialState = {\n  posts: [],\n  post: {},\n  allPost: []\n};\nexport default function PostsReducer(state = initialState, {\n  type,\n  payload\n}) {\n  if (type === post_type.GET_POSTS) {\n    return { ...state,\n      posts: payload,\n      allPost: payload\n    };\n  }\n\n  if (type === post_type.CREATE_POST) {\n    const posts = [...state.posts, payload];\n    return { ...state,\n      posts,\n      allPost: posts\n    };\n  }\n\n  if (type === post_type.DELETE_POST) {\n    const posts = [...state.posts];\n    const postIndex = posts.findIndex(post => post._id === payload);\n    posts.splice(postIndex, 1);\n    return { ...state,\n      posts,\n      allPost: posts\n    };\n  }\n\n  if (type === post_type.UPDATE_POST) {\n    const posts = [...state.posts];\n    const postIndex = posts.findIndex(post => post._id === payload._id);\n    posts[postIndex] = payload;\n    return { ...state,\n      posts,\n      allPost: posts\n    };\n  }\n\n  if (type === post_type.GET_SINGLE_POST) {\n    return { ...state,\n      post: payload\n    };\n  }\n\n  if (type === post_type.REMOVE_SINGLE_POST) {\n    return { ...state,\n      post: initialState.post\n    };\n  }\n\n  if (type === post_type.GET_FILTERED_POSTS) {\n    const posts = [...state.posts];\n    const filtered_posts = posts.filter(post => post.tags.includes(payload));\n    console.log(filtered_posts);\n    return { ...state // posts: filtered_posts,\n\n    };\n  }\n\n  return state;\n}\n_c = PostsReducer;\n\nvar _c;\n\n$RefreshReg$(_c, \"PostsReducer\");","map":{"version":3,"sources":["/home/neosoft/Desktop/Pankaj/learning/react/blog-app/basic-blog-redux-app/src/Store/reducers/posts.reducer.js"],"names":["post_type","initialState","posts","post","allPost","PostsReducer","state","type","payload","GET_POSTS","CREATE_POST","DELETE_POST","postIndex","findIndex","_id","splice","UPDATE_POST","GET_SINGLE_POST","REMOVE_SINGLE_POST","GET_FILTERED_POSTS","filtered_posts","filter","tags","includes","console","log"],"mappings":"AAAA,SAASA,SAAT,QAA0B,iBAA1B;AAEA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,KAAK,EAAE,EADY;AAEnBC,EAAAA,IAAI,EAAE,EAFa;AAGnBC,EAAAA,OAAO,EAAE;AAHU,CAArB;AAMA,eAAe,SAASC,YAAT,CAAsBC,KAAK,GAAGL,YAA9B,EAA4C;AAAEM,EAAAA,IAAF;AAAQC,EAAAA;AAAR,CAA5C,EAA+D;AAC5E,MAAID,IAAI,KAAKP,SAAS,CAACS,SAAvB,EAAkC;AAChC,WAAO,EACL,GAAGH,KADE;AAELJ,MAAAA,KAAK,EAAEM,OAFF;AAGLJ,MAAAA,OAAO,EAAEI;AAHJ,KAAP;AAKD;;AAED,MAAID,IAAI,KAAKP,SAAS,CAACU,WAAvB,EAAoC;AAClC,UAAMR,KAAK,GAAG,CAAC,GAAGI,KAAK,CAACJ,KAAV,EAAiBM,OAAjB,CAAd;AACA,WAAO,EACL,GAAGF,KADE;AAELJ,MAAAA,KAFK;AAGLE,MAAAA,OAAO,EAAEF;AAHJ,KAAP;AAKD;;AAED,MAAIK,IAAI,KAAKP,SAAS,CAACW,WAAvB,EAAoC;AAClC,UAAMT,KAAK,GAAG,CAAC,GAAGI,KAAK,CAACJ,KAAV,CAAd;AACA,UAAMU,SAAS,GAAGV,KAAK,CAACW,SAAN,CAAgBV,IAAI,IAAIA,IAAI,CAACW,GAAL,KAAaN,OAArC,CAAlB;AACAN,IAAAA,KAAK,CAACa,MAAN,CAAaH,SAAb,EAAwB,CAAxB;AACA,WAAO,EACL,GAAGN,KADE;AAELJ,MAAAA,KAFK;AAGLE,MAAAA,OAAO,EAAEF;AAHJ,KAAP;AAKD;;AAED,MAAIK,IAAI,KAAKP,SAAS,CAACgB,WAAvB,EAAoC;AAClC,UAAMd,KAAK,GAAG,CAAC,GAAGI,KAAK,CAACJ,KAAV,CAAd;AACA,UAAMU,SAAS,GAAGV,KAAK,CAACW,SAAN,CAAgBV,IAAI,IAAIA,IAAI,CAACW,GAAL,KAAaN,OAAO,CAACM,GAA7C,CAAlB;AAEAZ,IAAAA,KAAK,CAACU,SAAD,CAAL,GAAmBJ,OAAnB;AACA,WAAO,EACL,GAAGF,KADE;AAELJ,MAAAA,KAFK;AAGLE,MAAAA,OAAO,EAAEF;AAHJ,KAAP;AAKD;;AAED,MAAIK,IAAI,KAAKP,SAAS,CAACiB,eAAvB,EAAwC;AACtC,WAAO,EACL,GAAGX,KADE;AAELH,MAAAA,IAAI,EAAEK;AAFD,KAAP;AAID;;AAED,MAAID,IAAI,KAAKP,SAAS,CAACkB,kBAAvB,EAA2C;AACzC,WAAO,EACL,GAAGZ,KADE;AAELH,MAAAA,IAAI,EAAEF,YAAY,CAACE;AAFd,KAAP;AAID;;AAED,MAAII,IAAI,KAAKP,SAAS,CAACmB,kBAAvB,EAA2C;AACzC,UAAMjB,KAAK,GAAG,CAAC,GAAGI,KAAK,CAACJ,KAAV,CAAd;AACA,UAAMkB,cAAc,GAAGlB,KAAK,CAACmB,MAAN,CAAalB,IAAI,IAAIA,IAAI,CAACmB,IAAL,CAAUC,QAAV,CAAmBf,OAAnB,CAArB,CAAvB;AACAgB,IAAAA,OAAO,CAACC,GAAR,CAAYL,cAAZ;AACA,WAAO,EACL,GAAGd,KADE,CAEL;;AAFK,KAAP;AAID;;AACD,SAAOA,KAAP;AACD;KAjEuBD,Y","sourcesContent":["import { post_type } from 'Store/constants'\n\nconst initialState = {\n  posts: [],\n  post: {},\n  allPost: [],\n}\n\nexport default function PostsReducer(state = initialState, { type, payload }) {\n  if (type === post_type.GET_POSTS) {\n    return {\n      ...state,\n      posts: payload,\n      allPost: payload,\n    }\n  }\n\n  if (type === post_type.CREATE_POST) {\n    const posts = [...state.posts, payload]\n    return {\n      ...state,\n      posts,\n      allPost: posts,\n    }\n  }\n\n  if (type === post_type.DELETE_POST) {\n    const posts = [...state.posts]\n    const postIndex = posts.findIndex(post => post._id === payload)\n    posts.splice(postIndex, 1)\n    return {\n      ...state,\n      posts,\n      allPost: posts,\n    }\n  }\n\n  if (type === post_type.UPDATE_POST) {\n    const posts = [...state.posts]\n    const postIndex = posts.findIndex(post => post._id === payload._id)\n\n    posts[postIndex] = payload\n    return {\n      ...state,\n      posts,\n      allPost: posts,\n    }\n  }\n\n  if (type === post_type.GET_SINGLE_POST) {\n    return {\n      ...state,\n      post: payload,\n    }\n  }\n\n  if (type === post_type.REMOVE_SINGLE_POST) {\n    return {\n      ...state,\n      post: initialState.post,\n    }\n  }\n\n  if (type === post_type.GET_FILTERED_POSTS) {\n    const posts = [...state.posts]\n    const filtered_posts = posts.filter(post => post.tags.includes(payload))\n    console.log(filtered_posts)\n    return {\n      ...state,\n      // posts: filtered_posts,\n    }\n  }\n  return state\n}\n"]},"metadata":{},"sourceType":"module"}