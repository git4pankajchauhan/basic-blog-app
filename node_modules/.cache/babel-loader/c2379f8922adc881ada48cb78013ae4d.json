{"ast":null,"code":"import { formatError, login, runLogoutTimer, saveTokenInLocalStorage, signUp } from '../../services/AuthService';\nexport const SIGNUP_CONFIRMED_ACTION = '[signup action] confirmed signup';\nexport const SIGNUP_FAILED_ACTION = '[signup action] failed signup';\nexport const LOGIN_CONFIRMED_ACTION = '[login action] confirmed login';\nexport const LOGIN_FAILED_ACTION = '[login action] failed login';\nexport const LOADING_TOGGLE_ACTION = '[Loading action] toggle loading';\nexport const LOGOUT_ACTION = '[Logout action] logout action';\nexport function signupAction(email, password, history) {\n  return dispatch => {\n    signUp(email, password).then(response => {\n      saveTokenInLocalStorage(response.data);\n      runLogoutTimer(dispatch, response.data.expiresIn * 1000, history);\n      dispatch(confirmedSignupAction(response.data));\n      history.push('/');\n    }).catch(error => {\n      const errorMessage = formatError(error.response.data);\n      dispatch(signupFailedAction(errorMessage));\n    });\n  };\n}\nexport function logout(history) {\n  localStorage.removeItem('userDetails');\n  history.push('/login');\n  return {\n    type: LOGOUT_ACTION\n  };\n}\nexport function loginAction(email, password, history) {\n  return dispatch => {\n    login(email, password).then(response => {\n      saveTokenInLocalStorage(response.data);\n      runLogoutTimer(dispatch, response.data.expiresIn * 1000, history);\n      dispatch(loginConfirmedAction(response.data));\n      history.push('/');\n    }).catch(error => {\n      const errorMessage = formatError(error.response.data);\n      dispatch(loginFailedAction(errorMessage));\n    });\n  };\n}\nexport function loginFailedAction(data) {\n  return {\n    type: LOGIN_FAILED_ACTION,\n    payload: data\n  };\n}\nexport function loginConfirmedAction(data) {\n  return {\n    type: LOGIN_CONFIRMED_ACTION,\n    payload: data\n  };\n}\nexport function confirmedSignupAction(payload) {\n  return {\n    type: SIGNUP_CONFIRMED_ACTION,\n    payload\n  };\n}\nexport function signupFailedAction(message) {\n  return {\n    type: SIGNUP_FAILED_ACTION,\n    payload: message\n  };\n}\nexport function loadingToggleAction(status) {\n  return {\n    type: LOADING_TOGGLE_ACTION,\n    payload: status\n  };\n}","map":{"version":3,"sources":["/home/neosoft/Desktop/Pankaj/learning/react/blog-app/basic-blog-redux-app/src/Store/actions/Auth.action.js"],"names":["formatError","login","runLogoutTimer","saveTokenInLocalStorage","signUp","SIGNUP_CONFIRMED_ACTION","SIGNUP_FAILED_ACTION","LOGIN_CONFIRMED_ACTION","LOGIN_FAILED_ACTION","LOADING_TOGGLE_ACTION","LOGOUT_ACTION","signupAction","email","password","history","dispatch","then","response","data","expiresIn","confirmedSignupAction","push","catch","error","errorMessage","signupFailedAction","logout","localStorage","removeItem","type","loginAction","loginConfirmedAction","loginFailedAction","payload","message","loadingToggleAction","status"],"mappings":"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","sourcesContent":["import { formatError, login, runLogoutTimer, saveTokenInLocalStorage, signUp } from '../../services/AuthService';\n\nexport const SIGNUP_CONFIRMED_ACTION = '[signup action] confirmed signup';\nexport const SIGNUP_FAILED_ACTION = '[signup action] failed signup';\nexport const LOGIN_CONFIRMED_ACTION = '[login action] confirmed login';\nexport const LOGIN_FAILED_ACTION = '[login action] failed login';\nexport const LOADING_TOGGLE_ACTION = '[Loading action] toggle loading';\nexport const LOGOUT_ACTION = '[Logout action] logout action';\n\nexport function signupAction(email, password, history) {\n  return dispatch => {\n    signUp(email, password)\n      .then(response => {\n        saveTokenInLocalStorage(response.data);\n        runLogoutTimer(dispatch, response.data.expiresIn * 1000, history);\n        dispatch(confirmedSignupAction(response.data));\n        history.push('/');\n      })\n      .catch(error => {\n        const errorMessage = formatError(error.response.data);\n        dispatch(signupFailedAction(errorMessage));\n      });\n  };\n}\n\nexport function logout(history) {\n  localStorage.removeItem('userDetails');\n  history.push('/login');\n  return {\n    type: LOGOUT_ACTION,\n  };\n}\n\nexport function loginAction(email, password, history) {\n  return dispatch => {\n    login(email, password)\n      .then(response => {\n        saveTokenInLocalStorage(response.data);\n        runLogoutTimer(dispatch, response.data.expiresIn * 1000, history);\n        dispatch(loginConfirmedAction(response.data));\n        history.push('/');\n      })\n      .catch(error => {\n        const errorMessage = formatError(error.response.data);\n        dispatch(loginFailedAction(errorMessage));\n      });\n  };\n}\n\nexport function loginFailedAction(data) {\n  return {\n    type: LOGIN_FAILED_ACTION,\n    payload: data,\n  };\n}\n\nexport function loginConfirmedAction(data) {\n  return {\n    type: LOGIN_CONFIRMED_ACTION,\n    payload: data,\n  };\n}\n\nexport function confirmedSignupAction(payload) {\n  return {\n    type: SIGNUP_CONFIRMED_ACTION,\n    payload,\n  };\n}\n\nexport function signupFailedAction(message) {\n  return {\n    type: SIGNUP_FAILED_ACTION,\n    payload: message,\n  };\n}\n\nexport function loadingToggleAction(status) {\n  return {\n    type: LOADING_TOGGLE_ACTION,\n    payload: status,\n  };\n}\n"]},"metadata":{},"sourceType":"module"}