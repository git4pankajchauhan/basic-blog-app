{"ast":null,"code":"import axiosInstance from './axiosInstance';\nexport const signup = userdata => axiosInstance.post(`/user/signup`, userdata);\nexport const login = userdata => axiosInstance.post(`/user/login`, userdata); // export function formatError(errorResponse) {\n//   switch (errorResponse.error.message) {\n//     case 'EMAIL_EXISTS':\n//       return 'Email already exists'\n//     case 'EMAIL_NOT_FOUND':\n//       return 'Email not found'\n//     case 'INVALID_PASSWORD':\n//       return 'Invalid Password'\n//     case 'USER_DISABLED':\n//       return 'User Disabled'\n//     default:\n//       return ''\n//   }\n// }\n\nexport const saveTokenInLocalStorage = tokenDetails => {\n  tokenDetails.expireDate = new Date(new Date().getTime() + tokenDetails.expiresIn * 1000);\n  localStorage.setItem('userDetails', JSON.stringify(tokenDetails));\n}; // export function runLogoutTimer(dispatch, timer, history) {\n//   setTimeout(() => {\n//     dispatch(logout(history));\n//   }, timer);\n// }\n// export function checkAutoLogin(dispatch, history) {\n//   const tokenDetailsString = localStorage.getItem('userDetails');\n//   let tokenDetails = '';\n//   if (!tokenDetailsString) {\n//     dispatch(logout(history));\n//     return;\n//   }\n//   tokenDetails = JSON.parse(tokenDetailsString);\n//   let expireDate = new Date(tokenDetails.expireDate);\n//   let todaysDate = new Date();\n//   if (todaysDate > expireDate) {\n//     dispatch(logout(history));\n//     return;\n//   }\n//   dispatch(loginConfirmedAction(tokenDetails));\n//   const timer = expireDate.getTime() - todaysDate.getTime();\n//   runLogoutTimer(dispatch, timer, history);\n// }","map":{"version":3,"sources":["/home/neosoft/Desktop/Pankaj/learning/react/blog-app/basic-blog-redux-app/src/Services/auth.service.js"],"names":["axiosInstance","signup","userdata","post","login","saveTokenInLocalStorage","tokenDetails","expireDate","Date","getTime","expiresIn","localStorage","setItem","JSON","stringify"],"mappings":"AAAA,OAAOA,aAAP,MAA0B,iBAA1B;AAEA,OAAO,MAAMC,MAAM,GAAGC,QAAQ,IAAIF,aAAa,CAACG,IAAd,CAAoB,cAApB,EAAmCD,QAAnC,CAA3B;AAEP,OAAO,MAAME,KAAK,GAAGF,QAAQ,IAAIF,aAAa,CAACG,IAAd,CAAoB,aAApB,EAAkCD,QAAlC,CAA1B,C,CAEP;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;;AAEA,OAAO,MAAMG,uBAAuB,GAAGC,YAAY,IAAI;AACrDA,EAAAA,YAAY,CAACC,UAAb,GAA0B,IAAIC,IAAJ,CAAS,IAAIA,IAAJ,GAAWC,OAAX,KAAuBH,YAAY,CAACI,SAAb,GAAyB,IAAzD,CAA1B;AACAC,EAAAA,YAAY,CAACC,OAAb,CAAqB,aAArB,EAAoCC,IAAI,CAACC,SAAL,CAAeR,YAAf,CAApC;AACD,CAHM,C,CAKP;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA","sourcesContent":["import axiosInstance from './axiosInstance'\n\nexport const signup = userdata => axiosInstance.post(`/user/signup`, userdata)\n\nexport const login = userdata => axiosInstance.post(`/user/login`, userdata)\n\n// export function formatError(errorResponse) {\n//   switch (errorResponse.error.message) {\n//     case 'EMAIL_EXISTS':\n//       return 'Email already exists'\n\n//     case 'EMAIL_NOT_FOUND':\n//       return 'Email not found'\n//     case 'INVALID_PASSWORD':\n//       return 'Invalid Password'\n//     case 'USER_DISABLED':\n//       return 'User Disabled'\n\n//     default:\n//       return ''\n//   }\n// }\n\nexport const saveTokenInLocalStorage = tokenDetails => {\n  tokenDetails.expireDate = new Date(new Date().getTime() + tokenDetails.expiresIn * 1000)\n  localStorage.setItem('userDetails', JSON.stringify(tokenDetails))\n}\n\n// export function runLogoutTimer(dispatch, timer, history) {\n//   setTimeout(() => {\n//     dispatch(logout(history));\n//   }, timer);\n// }\n\n// export function checkAutoLogin(dispatch, history) {\n//   const tokenDetailsString = localStorage.getItem('userDetails');\n//   let tokenDetails = '';\n//   if (!tokenDetailsString) {\n//     dispatch(logout(history));\n//     return;\n//   }\n\n//   tokenDetails = JSON.parse(tokenDetailsString);\n//   let expireDate = new Date(tokenDetails.expireDate);\n//   let todaysDate = new Date();\n\n//   if (todaysDate > expireDate) {\n//     dispatch(logout(history));\n//     return;\n//   }\n//   dispatch(loginConfirmedAction(tokenDetails));\n\n//   const timer = expireDate.getTime() - todaysDate.getTime();\n//   runLogoutTimer(dispatch, timer, history);\n// }\n"]},"metadata":{},"sourceType":"module"}