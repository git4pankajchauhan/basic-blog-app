{"ast":null,"code":"import { createPost, deletePost, getPosts, getSinglePost, updatePost } from 'Services/posts.service'; // import { CONFIRMED_CREATE_POST_ACTION, CONFIRMED_DELETE_POST_ACTION, CONFIRMED_EDIT_POST_ACTION, CONFIRMED_GET_POST, CONFIRMED_GET_POSTS, GET_POSTS_BY_TAG, GET_SINGLE_POST, SET_SINGLE_POST } from 'Store/constants/post.constant'\n\nimport { closeDrawer } from './common.action'; // get posts from api\n\nexport const getPostsAction = () => async (dispatch, getState) => {\n  try {\n    const posts = await getPosts();\n    dispatch(confirmedGetPostsAction(posts.data));\n  } catch (error) {\n    console.log('get post action error', error);\n  }\n}; // get post from store\n\nexport const confirmedGetPostsAction = posts => ({\n  type: CONFIRMED_GET_POSTS,\n  payload: posts\n}); // get filtered post from store\n\nexport const getPostActionByTag = tags => ({\n  type: GET_POSTS_BY_TAG,\n  payload: tags\n}); // get single post from api\n\nexport const getSinglePostAction = id => async dispatch => {\n  try {\n    const post = await getSinglePost(id);\n    dispatch({\n      type: SET_SINGLE_POST,\n      payload: post\n    });\n  } catch (error) {\n    console.log('get post action error', error);\n  }\n}; // get single post from store\n\nexport const confirmGetSinglePostAction = id => ({\n  type: GET_SINGLE_POST,\n  payload: id\n}); // create new post\n\nexport const createPostAction = postData => async (dispatch, getState) => {\n  try {\n    const result = await createPost(postData);\n    const singlePost = result.data.lastpost;\n    dispatch(confirmedCreatePostAction(singlePost));\n    dispatch(closeDrawer());\n  } catch (error) {\n    console.log('create post action error', error);\n  }\n};\nexport const confirmedCreatePostAction = post => ({\n  type: CONFIRMED_CREATE_POST_ACTION,\n  payload: post\n});\nexport const deletePostAction = postId => async (dispatch, getState) => {\n  try {\n    await deletePost(postId);\n    dispatch(confirmedDeletePostAction(postId));\n  } catch (error) {\n    console.log('delete post action error', error);\n  }\n};\nexport const confirmedDeletePostAction = postId => ({\n  type: CONFIRMED_DELETE_POST_ACTION,\n  payload: postId\n});\nexport const updatePostAction = post => async (dispatch, getState) => {\n  try {\n    await updatePost(post._id, post);\n    dispatch(confirmedUpdatePostAction(post));\n    dispatch(closeDrawer());\n  } catch (error) {\n    console.log('update post action error', error);\n  }\n};\nexport const confirmedUpdatePostAction = post => ({\n  type: CONFIRMED_EDIT_POST_ACTION,\n  payload: post\n});","map":{"version":3,"sources":["/home/neosoft/Desktop/Pankaj/learning/react/blog-app/basic-blog-redux-app/src/Store/actions/post.action.js"],"names":["createPost","deletePost","getPosts","getSinglePost","updatePost","closeDrawer","getPostsAction","dispatch","getState","posts","confirmedGetPostsAction","data","error","console","log","type","CONFIRMED_GET_POSTS","payload","getPostActionByTag","tags","GET_POSTS_BY_TAG","getSinglePostAction","id","post","SET_SINGLE_POST","confirmGetSinglePostAction","GET_SINGLE_POST","createPostAction","postData","result","singlePost","lastpost","confirmedCreatePostAction","CONFIRMED_CREATE_POST_ACTION","deletePostAction","postId","confirmedDeletePostAction","CONFIRMED_DELETE_POST_ACTION","updatePostAction","_id","confirmedUpdatePostAction","CONFIRMED_EDIT_POST_ACTION"],"mappings":"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","sourcesContent":["import { createPost, deletePost, getPosts, getSinglePost, updatePost } from 'Services/posts.service'\n// import { CONFIRMED_CREATE_POST_ACTION, CONFIRMED_DELETE_POST_ACTION, CONFIRMED_EDIT_POST_ACTION, CONFIRMED_GET_POST, CONFIRMED_GET_POSTS, GET_POSTS_BY_TAG, GET_SINGLE_POST, SET_SINGLE_POST } from 'Store/constants/post.constant'\nimport { closeDrawer } from './common.action'\n\n// get posts from api\nexport const getPostsAction = () => async (dispatch, getState) => {\n  try {\n    const posts = await getPosts()\n    dispatch(confirmedGetPostsAction(posts.data))\n  } catch (error) {\n    console.log('get post action error', error)\n  }\n}\n// get post from store\nexport const confirmedGetPostsAction = posts => ({\n  type: CONFIRMED_GET_POSTS,\n  payload: posts,\n})\n// get filtered post from store\nexport const getPostActionByTag = tags => ({\n  type: GET_POSTS_BY_TAG,\n  payload: tags,\n})\n// get single post from api\nexport const getSinglePostAction = id => async dispatch => {\n  try {\n    const post = await getSinglePost(id)\n    dispatch({\n      type: SET_SINGLE_POST,\n      payload: post,\n    })\n  } catch (error) {\n    console.log('get post action error', error)\n  }\n}\n// get single post from store\nexport const confirmGetSinglePostAction = id => ({\n  type: GET_SINGLE_POST,\n  payload: id,\n})\n// create new post\nexport const createPostAction = postData => async (dispatch, getState) => {\n  try {\n    const result = await createPost(postData)\n    const singlePost = result.data.lastpost\n    dispatch(confirmedCreatePostAction(singlePost))\n    dispatch(closeDrawer())\n  } catch (error) {\n    console.log('create post action error', error)\n  }\n}\n\nexport const confirmedCreatePostAction = post => ({\n  type: CONFIRMED_CREATE_POST_ACTION,\n  payload: post,\n})\n\nexport const deletePostAction = postId => async (dispatch, getState) => {\n  try {\n    await deletePost(postId)\n    dispatch(confirmedDeletePostAction(postId))\n  } catch (error) {\n    console.log('delete post action error', error)\n  }\n}\n\nexport const confirmedDeletePostAction = postId => ({\n  type: CONFIRMED_DELETE_POST_ACTION,\n  payload: postId,\n})\n\nexport const updatePostAction = post => async (dispatch, getState) => {\n  try {\n    await updatePost(post._id, post)\n    dispatch(confirmedUpdatePostAction(post))\n    dispatch(closeDrawer())\n  } catch (error) {\n    console.log('update post action error', error)\n  }\n}\n\nexport const confirmedUpdatePostAction = post => ({\n  type: CONFIRMED_EDIT_POST_ACTION,\n  payload: post,\n})\n"]},"metadata":{},"sourceType":"module"}