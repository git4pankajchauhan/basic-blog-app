{"ast":null,"code":"import { signup } from 'Services/auth.service';\nimport { SIGNUP_CONFIRMED_ACTION } from 'Store/constants/auth.constant';\nimport { ERROR_MESSAGE, SUCCESS_MESSAGE } from 'Store/constants/common.constant';\nexport const signupAction = (userdata, history) => async dispatch => {\n  try {\n    const response = await signup(userdata);\n\n    if (response.data.status) {\n      dispatch(successMessage(response.data.message));\n    } else {\n      dispatch(errorMessage(response.data.message));\n    }\n  } catch (error) {\n    console.log('signup action error:', error);\n    dispatch(errorMessage('Oops! Something went wrong.'));\n  }\n};\nexport const confirmedSignupAction = payload => ({\n  type: SIGNUP_CONFIRMED_ACTION,\n  payload\n}); // export function signupFailedAction(message) {\n//   return {\n//     type: SIGNUP_FAILED_ACTION,\n//     payload: message,\n//   }\n// }\n// export function logout(history) {\n//   localStorage.removeItem('userDetails')\n//   history.push('/login')\n//   return {\n//     type: LOGOUT_ACTION,\n//   }\n// }\n// export function loginAction(email, password, history) {\n//   return dispatch => {\n//     login(email, password)\n//       .then(response => {\n//         saveTokenInLocalStorage(response.data)\n//         runLogoutTimer(dispatch, response.data.expiresIn * 1000, history)\n//         dispatch(loginConfirmedAction(response.data))\n//         history.push('/')\n//       })\n//       .catch(error => {\n//         const errorMessage = formatError(error.response.data)\n//         dispatch(loginFailedAction(errorMessage))\n//       })\n//   }\n// }\n// export function loginFailedAction(data) {\n//   return {\n//     type: LOGIN_FAILED_ACTION,\n//     payload: data,\n//   }\n// }\n// export function loginConfirmedAction(data) {\n//   return {\n//     type: LOGIN_CONFIRMED_ACTION,\n//     payload: data,\n//   }\n// }\n// export function loadingToggleAction(status) {\n//   return {\n//     type: LOADING_TOGGLE_ACTION,\n//     payload: status,\n//   }\n// }\n\nexport const successMessage = message => ({\n  type: SUCCESS_MESSAGE,\n  payload: message\n});\nexport const errorMessage = message => ({\n  type: ERROR_MESSAGE,\n  payload: message\n});","map":{"version":3,"sources":["/home/neosoft/Desktop/Pankaj/learning/react/blog-app/basic-blog-redux-app/src/Store/actions/auth.action.js"],"names":["signup","SIGNUP_CONFIRMED_ACTION","ERROR_MESSAGE","SUCCESS_MESSAGE","signupAction","userdata","history","dispatch","response","data","status","successMessage","message","errorMessage","error","console","log","confirmedSignupAction","payload","type"],"mappings":"AAAA,SAASA,MAAT,QAAuB,uBAAvB;AACA,SAASC,uBAAT,QAAwC,+BAAxC;AACA,SAASC,aAAT,EAAwBC,eAAxB,QAA+C,iCAA/C;AAEA,OAAO,MAAMC,YAAY,GAAG,CAACC,QAAD,EAAWC,OAAX,KAAuB,MAAMC,QAAN,IAAkB;AACnE,MAAI;AACF,UAAMC,QAAQ,GAAG,MAAMR,MAAM,CAACK,QAAD,CAA7B;;AAEA,QAAIG,QAAQ,CAACC,IAAT,CAAcC,MAAlB,EAA0B;AACxBH,MAAAA,QAAQ,CAACI,cAAc,CAACH,QAAQ,CAACC,IAAT,CAAcG,OAAf,CAAf,CAAR;AACD,KAFD,MAEO;AACLL,MAAAA,QAAQ,CAACM,YAAY,CAACL,QAAQ,CAACC,IAAT,CAAcG,OAAf,CAAb,CAAR;AACD;AACF,GARD,CAQE,OAAOE,KAAP,EAAc;AACdC,IAAAA,OAAO,CAACC,GAAR,CAAY,sBAAZ,EAAoCF,KAApC;AACAP,IAAAA,QAAQ,CAACM,YAAY,CAAC,6BAAD,CAAb,CAAR;AACD;AACF,CAbM;AAeP,OAAO,MAAMI,qBAAqB,GAAGC,OAAO,KAAK;AAC/CC,EAAAA,IAAI,EAAElB,uBADyC;AAE/CiB,EAAAA;AAF+C,CAAL,CAArC,C,CAKP;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,MAAMP,cAAc,GAAGC,OAAO,KAAK;AAAEO,EAAAA,IAAI,EAAEhB,eAAR;AAAyBe,EAAAA,OAAO,EAAEN;AAAlC,CAAL,CAA9B;AACP,OAAO,MAAMC,YAAY,GAAGD,OAAO,KAAK;AAAEO,EAAAA,IAAI,EAAEjB,aAAR;AAAuBgB,EAAAA,OAAO,EAAEN;AAAhC,CAAL,CAA5B","sourcesContent":["import { signup } from 'Services/auth.service'\nimport { SIGNUP_CONFIRMED_ACTION } from 'Store/constants/auth.constant'\nimport { ERROR_MESSAGE, SUCCESS_MESSAGE } from 'Store/constants/common.constant'\n\nexport const signupAction = (userdata, history) => async dispatch => {\n  try {\n    const response = await signup(userdata)\n\n    if (response.data.status) {\n      dispatch(successMessage(response.data.message))\n    } else {\n      dispatch(errorMessage(response.data.message))\n    }\n  } catch (error) {\n    console.log('signup action error:', error)\n    dispatch(errorMessage('Oops! Something went wrong.'))\n  }\n}\n\nexport const confirmedSignupAction = payload => ({\n  type: SIGNUP_CONFIRMED_ACTION,\n  payload,\n})\n\n// export function signupFailedAction(message) {\n//   return {\n//     type: SIGNUP_FAILED_ACTION,\n//     payload: message,\n//   }\n// }\n\n// export function logout(history) {\n//   localStorage.removeItem('userDetails')\n//   history.push('/login')\n//   return {\n//     type: LOGOUT_ACTION,\n//   }\n// }\n\n// export function loginAction(email, password, history) {\n//   return dispatch => {\n//     login(email, password)\n//       .then(response => {\n//         saveTokenInLocalStorage(response.data)\n//         runLogoutTimer(dispatch, response.data.expiresIn * 1000, history)\n//         dispatch(loginConfirmedAction(response.data))\n//         history.push('/')\n//       })\n//       .catch(error => {\n//         const errorMessage = formatError(error.response.data)\n//         dispatch(loginFailedAction(errorMessage))\n//       })\n//   }\n// }\n\n// export function loginFailedAction(data) {\n//   return {\n//     type: LOGIN_FAILED_ACTION,\n//     payload: data,\n//   }\n// }\n\n// export function loginConfirmedAction(data) {\n//   return {\n//     type: LOGIN_CONFIRMED_ACTION,\n//     payload: data,\n//   }\n// }\n\n// export function loadingToggleAction(status) {\n//   return {\n//     type: LOADING_TOGGLE_ACTION,\n//     payload: status,\n//   }\n// }\n\nexport const successMessage = message => ({ type: SUCCESS_MESSAGE, payload: message })\nexport const errorMessage = message => ({ type: ERROR_MESSAGE, payload: message })\n"]},"metadata":{},"sourceType":"module"}