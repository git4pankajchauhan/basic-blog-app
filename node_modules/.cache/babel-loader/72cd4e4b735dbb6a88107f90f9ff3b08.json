{"ast":null,"code":"var _jsxFileName = \"/home/neosoft/Desktop/Pankaj/learning/react/blog-app/basic-blog-redux-app/src/Components/Drawer/CustomDrawer.jsx\",\n    _s = $RefreshSig$();\n\nimport { Close } from '@material-ui/icons';\nimport React, { useRef } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { toggleDrawer } from 'Store/actions/common.action';\nimport { Drawer } from './Style/CustomDrawerStyle';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst CustomDrawer = props => {\n  _s();\n\n  const containerRef = useRef(null);\n  const isDrawerOpen = useSelector(state => state.common.drawer.isOpen);\n  const dispatch = useDispatch();\n\n  const onClose = e => {\n    if (containerRef.current === e.target) {\n      dispatch(toggleDrawer(false));\n    }\n  };\n\n  return isDrawerOpen ? /*#__PURE__*/_jsxDEV(Drawer, {\n    ref: containerRef,\n    onClick: onClose,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"c-drawer-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"c-drawer-head\",\n        children: [/*#__PURE__*/_jsxDEV(Close, {\n          onClick: dispatch(toggleDrawer(false))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 23,\n          columnNumber: 11\n        }, this), \" \", props.headTitle]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"c-drawer-children\",\n        children: props.children\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 20,\n    columnNumber: 5\n  }, this) : null;\n};\n\n_s(CustomDrawer, \"n/mQmNge+pxhkmfCaQGfG3iT1rs=\", false, function () {\n  return [useSelector, useDispatch];\n});\n\n_c = CustomDrawer;\nexport default CustomDrawer;\n\nvar _c;\n\n$RefreshReg$(_c, \"CustomDrawer\");","map":{"version":3,"sources":["/home/neosoft/Desktop/Pankaj/learning/react/blog-app/basic-blog-redux-app/src/Components/Drawer/CustomDrawer.jsx"],"names":["Close","React","useRef","useDispatch","useSelector","toggleDrawer","Drawer","CustomDrawer","props","containerRef","isDrawerOpen","state","common","drawer","isOpen","dispatch","onClose","e","current","target","headTitle","children"],"mappings":";;;AAAA,SAASA,KAAT,QAAsB,oBAAtB;AACA,OAAOC,KAAP,IAAgBC,MAAhB,QAA8B,OAA9B;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,SAASC,YAAT,QAA6B,6BAA7B;AACA,SAASC,MAAT,QAAuB,2BAAvB;;;AAEA,MAAMC,YAAY,GAAGC,KAAK,IAAI;AAAA;;AAC5B,QAAMC,YAAY,GAAGP,MAAM,CAAC,IAAD,CAA3B;AAEA,QAAMQ,YAAY,GAAGN,WAAW,CAACO,KAAK,IAAIA,KAAK,CAACC,MAAN,CAAaC,MAAb,CAAoBC,MAA9B,CAAhC;AACA,QAAMC,QAAQ,GAAGZ,WAAW,EAA5B;;AAEA,QAAMa,OAAO,GAAGC,CAAC,IAAI;AACnB,QAAIR,YAAY,CAACS,OAAb,KAAyBD,CAAC,CAACE,MAA/B,EAAuC;AACrCJ,MAAAA,QAAQ,CAACV,YAAY,CAAC,KAAD,CAAb,CAAR;AACD;AACF,GAJD;;AAMA,SAAOK,YAAY,gBACjB,QAAC,MAAD;AAAQ,IAAA,GAAG,EAAED,YAAb;AAA2B,IAAA,OAAO,EAAEO,OAApC;AAAA,2BACE;AAAK,MAAA,SAAS,EAAC,oBAAf;AAAA,8BACE;AAAK,QAAA,SAAS,EAAC,eAAf;AAAA,gCACE,QAAC,KAAD;AAAO,UAAA,OAAO,EAAED,QAAQ,CAACV,YAAY,CAAC,KAAD,CAAb;AAAxB;AAAA;AAAA;AAAA;AAAA,gBADF,OACqDG,KAAK,CAACY,SAD3D;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAIE;AAAK,QAAA,SAAS,EAAC,mBAAf;AAAA,kBAAoCZ,KAAK,CAACa;AAA1C;AAAA;AAAA;AAAA;AAAA,cAJF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADiB,GASf,IATJ;AAUD,CAtBD;;GAAMd,Y;UAGiBH,W,EACJD,W;;;KAJbI,Y;AAwBN,eAAeA,YAAf","sourcesContent":["import { Close } from '@material-ui/icons'\nimport React, { useRef } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { toggleDrawer } from 'Store/actions/common.action'\nimport { Drawer } from './Style/CustomDrawerStyle'\n\nconst CustomDrawer = props => {\n  const containerRef = useRef(null)\n\n  const isDrawerOpen = useSelector(state => state.common.drawer.isOpen)\n  const dispatch = useDispatch()\n\n  const onClose = e => {\n    if (containerRef.current === e.target) {\n      dispatch(toggleDrawer(false))\n    }\n  }\n\n  return isDrawerOpen ? (\n    <Drawer ref={containerRef} onClick={onClose}>\n      <div className='c-drawer-container'>\n        <div className='c-drawer-head'>\n          <Close onClick={dispatch(toggleDrawer(false))} /> {props.headTitle}\n        </div>\n        <div className='c-drawer-children'>{props.children}</div>\n      </div>\n    </Drawer>\n  ) : null\n}\n\nexport default CustomDrawer\n"]},"metadata":{},"sourceType":"module"}