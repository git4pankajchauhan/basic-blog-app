{"ast":null,"code":"import { getPosts, getPostByTag, getSinglePost, createPost, updatePost, deletePost } from 'Services/Posts.service';\nimport { GET_POSTS, CREATE_POST_ACTION, EDIT_POST_ACTION, CONFIRMED_GET_POSTS, CONFIRMED_CREATE_POST_ACTION, CONFIRMED_EDIT_POST_ACTION, CONFIRMED_DELETE_POST_ACTION } from 'Store/constants/post.constant';\nexport const getPostsAction = () => async (dispatch, getState) => {\n  try {\n    const posts = await getPosts();\n    dispatch(confirmedGetPostsAction(posts.data));\n  } catch (error) {\n    console.log('get post action error', error);\n  }\n};\nexport const confirmedGetPostsAction = posts => ({\n  type: CONFIRMED_GET_POSTS,\n  payload: posts\n});\nexport const createPostAction = (postData, history) => async (dispatch, getState) => {\n  try {\n    const result = await createPost(postData);\n    const singlePost = result.data.lastpost;\n    dispatch(confirmedCreatePostAction(singlePost));\n    history.push('/posts');\n  } catch (error) {\n    console.log('create post action error', error);\n  }\n};\nexport const confirmedCreatePostAction = post => ({\n  type: CONFIRMED_CREATE_POST_ACTION,\n  payload: post\n});\nexport const deletePostAction = postId => async (dispatch, getState) => {\n  try {\n    await deletePost(postId);\n    dispatch(confirmedDeletePostAction(postId));\n  } catch (error) {\n    console.log('delete post action error', error);\n  }\n};\nexport const confirmedDeletePostAction = postId => ({\n  type: CONFIRMED_DELETE_POST_ACTION,\n  payload: postId\n});\nexport function confirmedUpdatePostAction(post) {\n  return {\n    type: CONFIRMED_EDIT_POST_ACTION,\n    payload: post\n  };\n}\nexport function updatePostAction(post, history) {\n  return (dispatch, getState) => {\n    updatePost(post, post.id).then(reponse => {\n      dispatch(confirmedUpdatePostAction(post));\n      history.push('/posts');\n    });\n  };\n}","map":{"version":3,"sources":["/home/neosoft/Desktop/Pankaj/learning/react/blog-app/basic-blog-redux-app/src/Store/actions/post.action.js"],"names":["getPosts","getPostByTag","getSinglePost","createPost","updatePost","deletePost","GET_POSTS","CREATE_POST_ACTION","EDIT_POST_ACTION","CONFIRMED_GET_POSTS","CONFIRMED_CREATE_POST_ACTION","CONFIRMED_EDIT_POST_ACTION","CONFIRMED_DELETE_POST_ACTION","getPostsAction","dispatch","getState","posts","confirmedGetPostsAction","data","error","console","log","type","payload","createPostAction","postData","history","result","singlePost","lastpost","confirmedCreatePostAction","push","post","deletePostAction","postId","confirmedDeletePostAction","confirmedUpdatePostAction","updatePostAction","id","then","reponse"],"mappings":"AAAA,SAASA,QAAT,EAAmBC,YAAnB,EAAiCC,aAAjC,EAAgDC,UAAhD,EAA4DC,UAA5D,EAAwEC,UAAxE,QAA0F,wBAA1F;AACA,SAASC,SAAT,EAAoBC,kBAApB,EAAwCC,gBAAxC,EAA0DC,mBAA1D,EAA+EC,4BAA/E,EAA6GC,0BAA7G,EAAyIC,4BAAzI,QAA6K,+BAA7K;AAEA,OAAO,MAAMC,cAAc,GAAG,MAAM,OAAOC,QAAP,EAAiBC,QAAjB,KAA8B;AAChE,MAAI;AACF,UAAMC,KAAK,GAAG,MAAMhB,QAAQ,EAA5B;AACAc,IAAAA,QAAQ,CAACG,uBAAuB,CAACD,KAAK,CAACE,IAAP,CAAxB,CAAR;AACD,GAHD,CAGE,OAAOC,KAAP,EAAc;AACdC,IAAAA,OAAO,CAACC,GAAR,CAAY,uBAAZ,EAAqCF,KAArC;AACD;AACF,CAPM;AASP,OAAO,MAAMF,uBAAuB,GAAGD,KAAK,KAAK;AAC/CM,EAAAA,IAAI,EAAEb,mBADyC;AAE/Cc,EAAAA,OAAO,EAAEP;AAFsC,CAAL,CAArC;AAKP,OAAO,MAAMQ,gBAAgB,GAAG,CAACC,QAAD,EAAWC,OAAX,KAAuB,OAAOZ,QAAP,EAAiBC,QAAjB,KAA8B;AACnF,MAAI;AACF,UAAMY,MAAM,GAAG,MAAMxB,UAAU,CAACsB,QAAD,CAA/B;AACA,UAAMG,UAAU,GAAGD,MAAM,CAACT,IAAP,CAAYW,QAA/B;AACAf,IAAAA,QAAQ,CAACgB,yBAAyB,CAACF,UAAD,CAA1B,CAAR;AACAF,IAAAA,OAAO,CAACK,IAAR,CAAa,QAAb;AACD,GALD,CAKE,OAAOZ,KAAP,EAAc;AACdC,IAAAA,OAAO,CAACC,GAAR,CAAY,0BAAZ,EAAwCF,KAAxC;AACD;AACF,CATM;AAWP,OAAO,MAAMW,yBAAyB,GAAGE,IAAI,KAAK;AAChDV,EAAAA,IAAI,EAAEZ,4BAD0C;AAEhDa,EAAAA,OAAO,EAAES;AAFuC,CAAL,CAAtC;AAKP,OAAO,MAAMC,gBAAgB,GAAGC,MAAM,IAAI,OAAOpB,QAAP,EAAiBC,QAAjB,KAA8B;AACtE,MAAI;AACF,UAAMV,UAAU,CAAC6B,MAAD,CAAhB;AACApB,IAAAA,QAAQ,CAACqB,yBAAyB,CAACD,MAAD,CAA1B,CAAR;AACD,GAHD,CAGE,OAAOf,KAAP,EAAc;AACdC,IAAAA,OAAO,CAACC,GAAR,CAAY,0BAAZ,EAAwCF,KAAxC;AACD;AACF,CAPM;AASP,OAAO,MAAMgB,yBAAyB,GAAGD,MAAM,KAAK;AAClDZ,EAAAA,IAAI,EAAEV,4BAD4C;AAElDW,EAAAA,OAAO,EAAEW;AAFyC,CAAL,CAAxC;AAKP,OAAO,SAASE,yBAAT,CAAmCJ,IAAnC,EAAyC;AAC9C,SAAO;AACLV,IAAAA,IAAI,EAAEX,0BADD;AAELY,IAAAA,OAAO,EAAES;AAFJ,GAAP;AAID;AAED,OAAO,SAASK,gBAAT,CAA0BL,IAA1B,EAAgCN,OAAhC,EAAyC;AAC9C,SAAO,CAACZ,QAAD,EAAWC,QAAX,KAAwB;AAC7BX,IAAAA,UAAU,CAAC4B,IAAD,EAAOA,IAAI,CAACM,EAAZ,CAAV,CAA0BC,IAA1B,CAA+BC,OAAO,IAAI;AACxC1B,MAAAA,QAAQ,CAACsB,yBAAyB,CAACJ,IAAD,CAA1B,CAAR;AACAN,MAAAA,OAAO,CAACK,IAAR,CAAa,QAAb;AACD,KAHD;AAID,GALD;AAMD","sourcesContent":["import { getPosts, getPostByTag, getSinglePost, createPost, updatePost, deletePost } from 'Services/Posts.service';\nimport { GET_POSTS, CREATE_POST_ACTION, EDIT_POST_ACTION, CONFIRMED_GET_POSTS, CONFIRMED_CREATE_POST_ACTION, CONFIRMED_EDIT_POST_ACTION, CONFIRMED_DELETE_POST_ACTION } from 'Store/constants/post.constant';\n\nexport const getPostsAction = () => async (dispatch, getState) => {\n  try {\n    const posts = await getPosts();\n    dispatch(confirmedGetPostsAction(posts.data));\n  } catch (error) {\n    console.log('get post action error', error);\n  }\n};\n\nexport const confirmedGetPostsAction = posts => ({\n  type: CONFIRMED_GET_POSTS,\n  payload: posts,\n});\n\nexport const createPostAction = (postData, history) => async (dispatch, getState) => {\n  try {\n    const result = await createPost(postData);\n    const singlePost = result.data.lastpost;\n    dispatch(confirmedCreatePostAction(singlePost));\n    history.push('/posts');\n  } catch (error) {\n    console.log('create post action error', error);\n  }\n};\n\nexport const confirmedCreatePostAction = post => ({\n  type: CONFIRMED_CREATE_POST_ACTION,\n  payload: post,\n});\n\nexport const deletePostAction = postId => async (dispatch, getState) => {\n  try {\n    await deletePost(postId);\n    dispatch(confirmedDeletePostAction(postId));\n  } catch (error) {\n    console.log('delete post action error', error);\n  }\n};\n\nexport const confirmedDeletePostAction = postId => ({\n  type: CONFIRMED_DELETE_POST_ACTION,\n  payload: postId,\n});\n\nexport function confirmedUpdatePostAction(post) {\n  return {\n    type: CONFIRMED_EDIT_POST_ACTION,\n    payload: post,\n  };\n}\n\nexport function updatePostAction(post, history) {\n  return (dispatch, getState) => {\n    updatePost(post, post.id).then(reponse => {\n      dispatch(confirmedUpdatePostAction(post));\n      history.push('/posts');\n    });\n  };\n}\n"]},"metadata":{},"sourceType":"module"}