{"ast":null,"code":"// import { CONFIRMED_CREATE_POST_ACTION, CONFIRMED_DELETE_POST_ACTION, CONFIRMED_EDIT_POST_ACTION, CONFIRMED_GET_POST, CONFIRMED_GET_POSTS, GET_POSTS_BY_TAG, GET_SINGLE_POST, SET_SINGLE_POST } from '../constants/post.constant'\nimport { post_type } from 'Store/constants/post.constant';\nconst initialState = {\n  posts: [],\n  post: []\n};\nexport default function PostsReducer(state = initialState, actions) {\n  if (actions.type === post_type.GET_POSTS) {\n    return { ...state,\n      posts: actions.payload\n    };\n  }\n\n  if (actions.type === CONFIRMED_CREATE_POST_ACTION) {\n    const posts = [...state.posts, actions.payload];\n    return { ...state,\n      posts\n    };\n  }\n\n  if (actions.type === CONFIRMED_DELETE_POST_ACTION) {\n    const posts = [...state.posts];\n    const postIndex = posts.findIndex(post => post._id === actions.payload);\n    posts.splice(postIndex, 1);\n    return { ...state,\n      posts\n    };\n  }\n\n  if (actions.type === CONFIRMED_EDIT_POST_ACTION) {\n    const posts = [...state.posts];\n    const postIndex = posts.findIndex(post => post._id === actions.payload._id);\n    posts[postIndex] = actions.payload;\n    return { ...state,\n      posts\n    };\n  }\n\n  if (actions.type === GET_POSTS_BY_TAG) {\n    const posts = [...state.posts];\n    const filtered_posts = posts.filter(post => post.tags.includes(actions.payload));\n    return { ...state,\n      posts: filtered_posts\n    };\n  }\n\n  if (actions.type === GET_SINGLE_POST) {\n    const posts = [...state.posts];\n    const post = posts.find(post => post._id === actions.payload);\n    return { ...state,\n      post\n    };\n  }\n\n  if (actions.type === SET_SINGLE_POST) {\n    return { ...state,\n      post: actions.payload\n    };\n  }\n\n  return state;\n}\n_c = PostsReducer;\n\nvar _c;\n\n$RefreshReg$(_c, \"PostsReducer\");","map":{"version":3,"sources":["/home/neosoft/Desktop/Pankaj/learning/react/blog-app/basic-blog-redux-app/src/Store/reducers/posts.reducer.js"],"names":["post_type","initialState","posts","post","PostsReducer","state","actions","type","GET_POSTS","payload","CONFIRMED_CREATE_POST_ACTION","CONFIRMED_DELETE_POST_ACTION","postIndex","findIndex","_id","splice","CONFIRMED_EDIT_POST_ACTION","GET_POSTS_BY_TAG","filtered_posts","filter","tags","includes","GET_SINGLE_POST","find","SET_SINGLE_POST"],"mappings":"AAAA;AAEA,SAASA,SAAT,QAA0B,+BAA1B;AAEA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,KAAK,EAAE,EADY;AAEnBC,EAAAA,IAAI,EAAE;AAFa,CAArB;AAKA,eAAe,SAASC,YAAT,CAAsBC,KAAK,GAAGJ,YAA9B,EAA4CK,OAA5C,EAAqD;AAClE,MAAIA,OAAO,CAACC,IAAR,KAAiBP,SAAS,CAACQ,SAA/B,EAA0C;AACxC,WAAO,EACL,GAAGH,KADE;AAELH,MAAAA,KAAK,EAAEI,OAAO,CAACG;AAFV,KAAP;AAID;;AAED,MAAIH,OAAO,CAACC,IAAR,KAAiBG,4BAArB,EAAmD;AACjD,UAAMR,KAAK,GAAG,CAAC,GAAGG,KAAK,CAACH,KAAV,EAAiBI,OAAO,CAACG,OAAzB,CAAd;AACA,WAAO,EACL,GAAGJ,KADE;AAELH,MAAAA;AAFK,KAAP;AAID;;AAED,MAAII,OAAO,CAACC,IAAR,KAAiBI,4BAArB,EAAmD;AACjD,UAAMT,KAAK,GAAG,CAAC,GAAGG,KAAK,CAACH,KAAV,CAAd;AACA,UAAMU,SAAS,GAAGV,KAAK,CAACW,SAAN,CAAgBV,IAAI,IAAIA,IAAI,CAACW,GAAL,KAAaR,OAAO,CAACG,OAA7C,CAAlB;AACAP,IAAAA,KAAK,CAACa,MAAN,CAAaH,SAAb,EAAwB,CAAxB;AACA,WAAO,EACL,GAAGP,KADE;AAELH,MAAAA;AAFK,KAAP;AAID;;AAED,MAAII,OAAO,CAACC,IAAR,KAAiBS,0BAArB,EAAiD;AAC/C,UAAMd,KAAK,GAAG,CAAC,GAAGG,KAAK,CAACH,KAAV,CAAd;AACA,UAAMU,SAAS,GAAGV,KAAK,CAACW,SAAN,CAAgBV,IAAI,IAAIA,IAAI,CAACW,GAAL,KAAaR,OAAO,CAACG,OAAR,CAAgBK,GAArD,CAAlB;AAEAZ,IAAAA,KAAK,CAACU,SAAD,CAAL,GAAmBN,OAAO,CAACG,OAA3B;AACA,WAAO,EACL,GAAGJ,KADE;AAELH,MAAAA;AAFK,KAAP;AAID;;AAED,MAAII,OAAO,CAACC,IAAR,KAAiBU,gBAArB,EAAuC;AACrC,UAAMf,KAAK,GAAG,CAAC,GAAGG,KAAK,CAACH,KAAV,CAAd;AACA,UAAMgB,cAAc,GAAGhB,KAAK,CAACiB,MAAN,CAAahB,IAAI,IAAIA,IAAI,CAACiB,IAAL,CAAUC,QAAV,CAAmBf,OAAO,CAACG,OAA3B,CAArB,CAAvB;AACA,WAAO,EACL,GAAGJ,KADE;AAELH,MAAAA,KAAK,EAAEgB;AAFF,KAAP;AAID;;AAED,MAAIZ,OAAO,CAACC,IAAR,KAAiBe,eAArB,EAAsC;AACpC,UAAMpB,KAAK,GAAG,CAAC,GAAGG,KAAK,CAACH,KAAV,CAAd;AACA,UAAMC,IAAI,GAAGD,KAAK,CAACqB,IAAN,CAAWpB,IAAI,IAAIA,IAAI,CAACW,GAAL,KAAaR,OAAO,CAACG,OAAxC,CAAb;AACA,WAAO,EACL,GAAGJ,KADE;AAELF,MAAAA;AAFK,KAAP;AAID;;AAED,MAAIG,OAAO,CAACC,IAAR,KAAiBiB,eAArB,EAAsC;AACpC,WAAO,EACL,GAAGnB,KADE;AAELF,MAAAA,IAAI,EAAEG,OAAO,CAACG;AAFT,KAAP;AAID;;AAED,SAAOJ,KAAP;AACD;KA/DuBD,Y","sourcesContent":["// import { CONFIRMED_CREATE_POST_ACTION, CONFIRMED_DELETE_POST_ACTION, CONFIRMED_EDIT_POST_ACTION, CONFIRMED_GET_POST, CONFIRMED_GET_POSTS, GET_POSTS_BY_TAG, GET_SINGLE_POST, SET_SINGLE_POST } from '../constants/post.constant'\n\nimport { post_type } from 'Store/constants/post.constant'\n\nconst initialState = {\n  posts: [],\n  post: [],\n}\n\nexport default function PostsReducer(state = initialState, actions) {\n  if (actions.type === post_type.GET_POSTS) {\n    return {\n      ...state,\n      posts: actions.payload,\n    }\n  }\n\n  if (actions.type === CONFIRMED_CREATE_POST_ACTION) {\n    const posts = [...state.posts, actions.payload]\n    return {\n      ...state,\n      posts,\n    }\n  }\n\n  if (actions.type === CONFIRMED_DELETE_POST_ACTION) {\n    const posts = [...state.posts]\n    const postIndex = posts.findIndex(post => post._id === actions.payload)\n    posts.splice(postIndex, 1)\n    return {\n      ...state,\n      posts,\n    }\n  }\n\n  if (actions.type === CONFIRMED_EDIT_POST_ACTION) {\n    const posts = [...state.posts]\n    const postIndex = posts.findIndex(post => post._id === actions.payload._id)\n\n    posts[postIndex] = actions.payload\n    return {\n      ...state,\n      posts,\n    }\n  }\n\n  if (actions.type === GET_POSTS_BY_TAG) {\n    const posts = [...state.posts]\n    const filtered_posts = posts.filter(post => post.tags.includes(actions.payload))\n    return {\n      ...state,\n      posts: filtered_posts,\n    }\n  }\n\n  if (actions.type === GET_SINGLE_POST) {\n    const posts = [...state.posts]\n    const post = posts.find(post => post._id === actions.payload)\n    return {\n      ...state,\n      post,\n    }\n  }\n\n  if (actions.type === SET_SINGLE_POST) {\n    return {\n      ...state,\n      post: actions.payload,\n    }\n  }\n\n  return state\n}\n"]},"metadata":{},"sourceType":"module"}