{"ast":null,"code":"import { CONFIRMED_CREATE_POST_ACTION, CONFIRMED_DELETE_POST_ACTION, CONFIRMED_EDIT_POST_ACTION, CONFIRMED_GET_POSTS, CONFIRMED_GET_SINGLE_POST, CREATE_POST_ACTION, GET_POSTS_BY_TAG } from '../constants/post.constant';\nconst initialState = {\n  posts: []\n};\nexport default function PostsReducer(state = initialState, actions) {\n  if (actions.type === CONFIRMED_GET_POSTS) {\n    return { ...state,\n      posts: actions.payload\n    };\n  }\n\n  if (actions.type === CONFIRMED_CREATE_POST_ACTION) {\n    const posts = [...state.posts, actions.payload];\n    return { ...state,\n      posts\n    };\n  }\n\n  if (actions.type === CONFIRMED_DELETE_POST_ACTION) {\n    const posts = [...state.posts];\n    const postIndex = posts.findIndex(post => post._id === actions.payload);\n    posts.splice(postIndex, 1);\n    return { ...state,\n      posts\n    };\n  }\n\n  if (actions.type === CONFIRMED_EDIT_POST_ACTION) {\n    const posts = [...state.posts];\n    const postIndex = posts.findIndex(post => post._id === actions.payload._id);\n    posts[postIndex] = actions.payload;\n    return { ...state,\n      posts\n    };\n  }\n\n  if (actions.type === GET_POSTS_BY_TAG) {\n    const posts = [...state.posts];\n    const filtered_posts = posts.filter(post => post.tags.includes(actions.payload));\n    return { ...state,\n      posts: filtered_posts\n    };\n  }\n\n  if (actions.type === CONFIRMED_GET_SINGLE_POST) {\n    const posts = [...state.posts];\n    const postIndex = posts.findIndex(post => post._id === actions.payload._id);\n    posts[postIndex] = actions.payload;\n    return { ...state,\n      posts\n    };\n  }\n\n  return state;\n}\n_c = PostsReducer;\n\nvar _c;\n\n$RefreshReg$(_c, \"PostsReducer\");","map":{"version":3,"sources":["/home/neosoft/Desktop/Pankaj/learning/react/blog-app/basic-blog-redux-app/src/Store/reducers/posts.reducer.js"],"names":["CONFIRMED_CREATE_POST_ACTION","CONFIRMED_DELETE_POST_ACTION","CONFIRMED_EDIT_POST_ACTION","CONFIRMED_GET_POSTS","CONFIRMED_GET_SINGLE_POST","CREATE_POST_ACTION","GET_POSTS_BY_TAG","initialState","posts","PostsReducer","state","actions","type","payload","postIndex","findIndex","post","_id","splice","filtered_posts","filter","tags","includes"],"mappings":"AAAA,SAASA,4BAAT,EAAuCC,4BAAvC,EAAqEC,0BAArE,EAAiGC,mBAAjG,EAAsHC,yBAAtH,EAAiJC,kBAAjJ,EAAqKC,gBAArK,QAA6L,4BAA7L;AAEA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,KAAK,EAAE;AADY,CAArB;AAIA,eAAe,SAASC,YAAT,CAAsBC,KAAK,GAAGH,YAA9B,EAA4CI,OAA5C,EAAqD;AAClE,MAAIA,OAAO,CAACC,IAAR,KAAiBT,mBAArB,EAA0C;AACxC,WAAO,EACL,GAAGO,KADE;AAELF,MAAAA,KAAK,EAAEG,OAAO,CAACE;AAFV,KAAP;AAID;;AAED,MAAIF,OAAO,CAACC,IAAR,KAAiBZ,4BAArB,EAAmD;AACjD,UAAMQ,KAAK,GAAG,CAAC,GAAGE,KAAK,CAACF,KAAV,EAAiBG,OAAO,CAACE,OAAzB,CAAd;AACA,WAAO,EACL,GAAGH,KADE;AAELF,MAAAA;AAFK,KAAP;AAID;;AAED,MAAIG,OAAO,CAACC,IAAR,KAAiBX,4BAArB,EAAmD;AACjD,UAAMO,KAAK,GAAG,CAAC,GAAGE,KAAK,CAACF,KAAV,CAAd;AACA,UAAMM,SAAS,GAAGN,KAAK,CAACO,SAAN,CAAgBC,IAAI,IAAIA,IAAI,CAACC,GAAL,KAAaN,OAAO,CAACE,OAA7C,CAAlB;AACAL,IAAAA,KAAK,CAACU,MAAN,CAAaJ,SAAb,EAAwB,CAAxB;AACA,WAAO,EACL,GAAGJ,KADE;AAELF,MAAAA;AAFK,KAAP;AAID;;AAED,MAAIG,OAAO,CAACC,IAAR,KAAiBV,0BAArB,EAAiD;AAC/C,UAAMM,KAAK,GAAG,CAAC,GAAGE,KAAK,CAACF,KAAV,CAAd;AACA,UAAMM,SAAS,GAAGN,KAAK,CAACO,SAAN,CAAgBC,IAAI,IAAIA,IAAI,CAACC,GAAL,KAAaN,OAAO,CAACE,OAAR,CAAgBI,GAArD,CAAlB;AAEAT,IAAAA,KAAK,CAACM,SAAD,CAAL,GAAmBH,OAAO,CAACE,OAA3B;AACA,WAAO,EACL,GAAGH,KADE;AAELF,MAAAA;AAFK,KAAP;AAID;;AAED,MAAIG,OAAO,CAACC,IAAR,KAAiBN,gBAArB,EAAuC;AACrC,UAAME,KAAK,GAAG,CAAC,GAAGE,KAAK,CAACF,KAAV,CAAd;AACA,UAAMW,cAAc,GAAGX,KAAK,CAACY,MAAN,CAAaJ,IAAI,IAAIA,IAAI,CAACK,IAAL,CAAUC,QAAV,CAAmBX,OAAO,CAACE,OAA3B,CAArB,CAAvB;AACA,WAAO,EACL,GAAGH,KADE;AAELF,MAAAA,KAAK,EAAEW;AAFF,KAAP;AAID;;AAED,MAAIR,OAAO,CAACC,IAAR,KAAiBR,yBAArB,EAAgD;AAC9C,UAAMI,KAAK,GAAG,CAAC,GAAGE,KAAK,CAACF,KAAV,CAAd;AACA,UAAMM,SAAS,GAAGN,KAAK,CAACO,SAAN,CAAgBC,IAAI,IAAIA,IAAI,CAACC,GAAL,KAAaN,OAAO,CAACE,OAAR,CAAgBI,GAArD,CAAlB;AAEAT,IAAAA,KAAK,CAACM,SAAD,CAAL,GAAmBH,OAAO,CAACE,OAA3B;AACA,WAAO,EACL,GAAGH,KADE;AAELF,MAAAA;AAFK,KAAP;AAID;;AAED,SAAOE,KAAP;AACD;KA1DuBD,Y","sourcesContent":["import { CONFIRMED_CREATE_POST_ACTION, CONFIRMED_DELETE_POST_ACTION, CONFIRMED_EDIT_POST_ACTION, CONFIRMED_GET_POSTS, CONFIRMED_GET_SINGLE_POST, CREATE_POST_ACTION, GET_POSTS_BY_TAG } from '../constants/post.constant'\n\nconst initialState = {\n  posts: [],\n}\n\nexport default function PostsReducer(state = initialState, actions) {\n  if (actions.type === CONFIRMED_GET_POSTS) {\n    return {\n      ...state,\n      posts: actions.payload,\n    }\n  }\n\n  if (actions.type === CONFIRMED_CREATE_POST_ACTION) {\n    const posts = [...state.posts, actions.payload]\n    return {\n      ...state,\n      posts,\n    }\n  }\n\n  if (actions.type === CONFIRMED_DELETE_POST_ACTION) {\n    const posts = [...state.posts]\n    const postIndex = posts.findIndex(post => post._id === actions.payload)\n    posts.splice(postIndex, 1)\n    return {\n      ...state,\n      posts,\n    }\n  }\n\n  if (actions.type === CONFIRMED_EDIT_POST_ACTION) {\n    const posts = [...state.posts]\n    const postIndex = posts.findIndex(post => post._id === actions.payload._id)\n\n    posts[postIndex] = actions.payload\n    return {\n      ...state,\n      posts,\n    }\n  }\n\n  if (actions.type === GET_POSTS_BY_TAG) {\n    const posts = [...state.posts]\n    const filtered_posts = posts.filter(post => post.tags.includes(actions.payload))\n    return {\n      ...state,\n      posts: filtered_posts,\n    }\n  }\n\n  if (actions.type === CONFIRMED_GET_SINGLE_POST) {\n    const posts = [...state.posts]\n    const postIndex = posts.findIndex(post => post._id === actions.payload._id)\n\n    posts[postIndex] = actions.payload\n    return {\n      ...state,\n      posts,\n    }\n  }\n\n  return state\n}\n"]},"metadata":{},"sourceType":"module"}