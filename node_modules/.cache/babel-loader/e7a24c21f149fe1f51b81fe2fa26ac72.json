{"ast":null,"code":"import { CONFIRMED_CREATE_POST_ACTION, CONFIRMED_DELETE_POST_ACTION, CONFIRMED_EDIT_POST_ACTION, CONFIRMED_GET_POST, CONFIRMED_GET_POSTS, GET_POSTS_BY_TAG, GET_SINGLE_POST, SET_SINGLE_POST } from '../constants/post.constant';\nconst initialState = {\n  posts: [],\n  post: []\n};\nexport default function PostsReducer(state = initialState, actions) {\n  if (actions.type === CONFIRMED_GET_POSTS) {\n    return { ...state,\n      posts: actions.payload\n    };\n  }\n\n  if (actions.type === CONFIRMED_CREATE_POST_ACTION) {\n    const posts = [...state.posts, actions.payload];\n    return { ...state,\n      posts\n    };\n  }\n\n  if (actions.type === CONFIRMED_DELETE_POST_ACTION) {\n    const posts = [...state.posts];\n    const postIndex = posts.findIndex(post => post._id === actions.payload);\n    posts.splice(postIndex, 1);\n    return { ...state,\n      posts\n    };\n  }\n\n  if (actions.type === CONFIRMED_EDIT_POST_ACTION) {\n    const posts = [...state.posts];\n    const postIndex = posts.findIndex(post => post._id === actions.payload._id);\n    posts[postIndex] = actions.payload;\n    return { ...state,\n      posts\n    };\n  }\n\n  if (actions.type === GET_POSTS_BY_TAG) {\n    const posts = [...state.posts];\n    const filtered_posts = posts.filter(post => post.tags.includes(actions.payload));\n    return { ...state,\n      posts: filtered_posts\n    };\n  }\n\n  if (actions.type === GET_SINGLE_POST) {\n    const posts = [...state.posts];\n    const post = posts.find(post => post._id === actions.payload);\n    return { ...state,\n      post\n    };\n  }\n\n  if (actions.type === SET_SINGLE_POST) {\n    return { ...state,\n      post: actions.payload\n    };\n  }\n\n  return state;\n}\n_c = PostsReducer;\n\nvar _c;\n\n$RefreshReg$(_c, \"PostsReducer\");","map":{"version":3,"sources":["/home/neosoft/Desktop/Pankaj/learning/react/blog-app/basic-blog-redux-app/src/Store/reducers/posts.reducer.js"],"names":["CONFIRMED_CREATE_POST_ACTION","CONFIRMED_DELETE_POST_ACTION","CONFIRMED_EDIT_POST_ACTION","CONFIRMED_GET_POST","CONFIRMED_GET_POSTS","GET_POSTS_BY_TAG","GET_SINGLE_POST","SET_SINGLE_POST","initialState","posts","post","PostsReducer","state","actions","type","payload","postIndex","findIndex","_id","splice","filtered_posts","filter","tags","includes","find"],"mappings":"AAAA,SAASA,4BAAT,EAAuCC,4BAAvC,EAAqEC,0BAArE,EAAiGC,kBAAjG,EAAqHC,mBAArH,EAA0IC,gBAA1I,EAA4JC,eAA5J,EAA6KC,eAA7K,QAAoM,4BAApM;AAEA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,KAAK,EAAE,EADY;AAEnBC,EAAAA,IAAI,EAAE;AAFa,CAArB;AAKA,eAAe,SAASC,YAAT,CAAsBC,KAAK,GAAGJ,YAA9B,EAA4CK,OAA5C,EAAqD;AAClE,MAAIA,OAAO,CAACC,IAAR,KAAiBV,mBAArB,EAA0C;AACxC,WAAO,EACL,GAAGQ,KADE;AAELH,MAAAA,KAAK,EAAEI,OAAO,CAACE;AAFV,KAAP;AAID;;AAED,MAAIF,OAAO,CAACC,IAAR,KAAiBd,4BAArB,EAAmD;AACjD,UAAMS,KAAK,GAAG,CAAC,GAAGG,KAAK,CAACH,KAAV,EAAiBI,OAAO,CAACE,OAAzB,CAAd;AACA,WAAO,EACL,GAAGH,KADE;AAELH,MAAAA;AAFK,KAAP;AAID;;AAED,MAAII,OAAO,CAACC,IAAR,KAAiBb,4BAArB,EAAmD;AACjD,UAAMQ,KAAK,GAAG,CAAC,GAAGG,KAAK,CAACH,KAAV,CAAd;AACA,UAAMO,SAAS,GAAGP,KAAK,CAACQ,SAAN,CAAgBP,IAAI,IAAIA,IAAI,CAACQ,GAAL,KAAaL,OAAO,CAACE,OAA7C,CAAlB;AACAN,IAAAA,KAAK,CAACU,MAAN,CAAaH,SAAb,EAAwB,CAAxB;AACA,WAAO,EACL,GAAGJ,KADE;AAELH,MAAAA;AAFK,KAAP;AAID;;AAED,MAAII,OAAO,CAACC,IAAR,KAAiBZ,0BAArB,EAAiD;AAC/C,UAAMO,KAAK,GAAG,CAAC,GAAGG,KAAK,CAACH,KAAV,CAAd;AACA,UAAMO,SAAS,GAAGP,KAAK,CAACQ,SAAN,CAAgBP,IAAI,IAAIA,IAAI,CAACQ,GAAL,KAAaL,OAAO,CAACE,OAAR,CAAgBG,GAArD,CAAlB;AAEAT,IAAAA,KAAK,CAACO,SAAD,CAAL,GAAmBH,OAAO,CAACE,OAA3B;AACA,WAAO,EACL,GAAGH,KADE;AAELH,MAAAA;AAFK,KAAP;AAID;;AAED,MAAII,OAAO,CAACC,IAAR,KAAiBT,gBAArB,EAAuC;AACrC,UAAMI,KAAK,GAAG,CAAC,GAAGG,KAAK,CAACH,KAAV,CAAd;AACA,UAAMW,cAAc,GAAGX,KAAK,CAACY,MAAN,CAAaX,IAAI,IAAIA,IAAI,CAACY,IAAL,CAAUC,QAAV,CAAmBV,OAAO,CAACE,OAA3B,CAArB,CAAvB;AACA,WAAO,EACL,GAAGH,KADE;AAELH,MAAAA,KAAK,EAAEW;AAFF,KAAP;AAID;;AAED,MAAIP,OAAO,CAACC,IAAR,KAAiBR,eAArB,EAAsC;AACpC,UAAMG,KAAK,GAAG,CAAC,GAAGG,KAAK,CAACH,KAAV,CAAd;AACA,UAAMC,IAAI,GAAGD,KAAK,CAACe,IAAN,CAAWd,IAAI,IAAIA,IAAI,CAACQ,GAAL,KAAaL,OAAO,CAACE,OAAxC,CAAb;AACA,WAAO,EACL,GAAGH,KADE;AAELF,MAAAA;AAFK,KAAP;AAID;;AAED,MAAIG,OAAO,CAACC,IAAR,KAAiBP,eAArB,EAAsC;AACpC,WAAO,EACL,GAAGK,KADE;AAELF,MAAAA,IAAI,EAAEG,OAAO,CAACE;AAFT,KAAP;AAID;;AAED,SAAOH,KAAP;AACD;KA/DuBD,Y","sourcesContent":["import { CONFIRMED_CREATE_POST_ACTION, CONFIRMED_DELETE_POST_ACTION, CONFIRMED_EDIT_POST_ACTION, CONFIRMED_GET_POST, CONFIRMED_GET_POSTS, GET_POSTS_BY_TAG, GET_SINGLE_POST, SET_SINGLE_POST } from '../constants/post.constant'\n\nconst initialState = {\n  posts: [],\n  post: [],\n}\n\nexport default function PostsReducer(state = initialState, actions) {\n  if (actions.type === CONFIRMED_GET_POSTS) {\n    return {\n      ...state,\n      posts: actions.payload,\n    }\n  }\n\n  if (actions.type === CONFIRMED_CREATE_POST_ACTION) {\n    const posts = [...state.posts, actions.payload]\n    return {\n      ...state,\n      posts,\n    }\n  }\n\n  if (actions.type === CONFIRMED_DELETE_POST_ACTION) {\n    const posts = [...state.posts]\n    const postIndex = posts.findIndex(post => post._id === actions.payload)\n    posts.splice(postIndex, 1)\n    return {\n      ...state,\n      posts,\n    }\n  }\n\n  if (actions.type === CONFIRMED_EDIT_POST_ACTION) {\n    const posts = [...state.posts]\n    const postIndex = posts.findIndex(post => post._id === actions.payload._id)\n\n    posts[postIndex] = actions.payload\n    return {\n      ...state,\n      posts,\n    }\n  }\n\n  if (actions.type === GET_POSTS_BY_TAG) {\n    const posts = [...state.posts]\n    const filtered_posts = posts.filter(post => post.tags.includes(actions.payload))\n    return {\n      ...state,\n      posts: filtered_posts,\n    }\n  }\n\n  if (actions.type === GET_SINGLE_POST) {\n    const posts = [...state.posts]\n    const post = posts.find(post => post._id === actions.payload)\n    return {\n      ...state,\n      post,\n    }\n  }\n\n  if (actions.type === SET_SINGLE_POST) {\n    return {\n      ...state,\n      post: actions.payload,\n    }\n  }\n\n  return state\n}\n"]},"metadata":{},"sourceType":"module"}