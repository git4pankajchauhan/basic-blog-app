{"ast":null,"code":"import { loadUser, login, signup } from 'Services/auth.service';\nimport { AUTH_ERROR, LOGIN_SUCCESS, LOGOUT_SUCCESS, USER_LOADED } from 'Store/constants/auth.constant';\nimport { toggleLoader } from './common.action';\nimport { getMessage } from './message.action';\nexport const loadUserAction = () => async (dispatch, getState) => {\n  try {\n    const response = await loadUser();\n    dispatch(loaderUserActionSuccess({\n      user\n    }));\n  } catch (e) {\n    // console.log('user load action error:', e)\n    dispatch(authError());\n  }\n};\nexport const signupAction = (userdata, history) => async dispatch => {\n  try {\n    const response = await signup(userdata);\n    dispatch(getMessage(response.data.message));\n    history.push('/login');\n  } catch (e) {\n    console.log('signup action error:', e);\n    dispatch(getMessage(e.response.data, e.response.status, 'REGISTER_FAIL'));\n    dispatch(authError());\n  }\n\n  dispatch(toggleLoader(false));\n};\nexport const loginAction = (userdata, history) => async dispatch => {\n  try {\n    const response = await login(userdata);\n    dispatch(loginActionSuccess({\n      user: response.data.user,\n      token: response.data.token\n    })); // history.push('/posts')\n  } catch (e) {\n    console.log('login action error:', e.response); // dispatch(getMessage(e.response.data, e.response.status, 'REGISTER_FAIL'))\n\n    dispatch(authError());\n  }\n\n  dispatch(toggleLoader(false));\n};\nexport const loginActionSuccess = userdata => ({\n  type: LOGIN_SUCCESS,\n  payload: userdata\n});\nexport const loaderUserActionSuccess = userdata => ({\n  type: USER_LOADED,\n  payload: userdata\n});\nexport const authError = () => ({\n  type: AUTH_ERROR\n});\nexport const logoutAction = history => {\n  history.push('/login');\n  return {\n    type: LOGOUT_SUCCESS\n  };\n};","map":{"version":3,"sources":["/home/neosoft/Desktop/Pankaj/learning/react/blog-app/basic-blog-redux-app/src/Store/actions/auth.action.js"],"names":["loadUser","login","signup","AUTH_ERROR","LOGIN_SUCCESS","LOGOUT_SUCCESS","USER_LOADED","toggleLoader","getMessage","loadUserAction","dispatch","getState","response","loaderUserActionSuccess","user","e","authError","signupAction","userdata","history","data","message","push","console","log","status","loginAction","loginActionSuccess","token","type","payload","logoutAction"],"mappings":"AAAA,SAASA,QAAT,EAAmBC,KAAnB,EAA0BC,MAA1B,QAAwC,uBAAxC;AACA,SAASC,UAAT,EAAqBC,aAArB,EAAoCC,cAApC,EAAoDC,WAApD,QAAuE,+BAAvE;AACA,SAASC,YAAT,QAA6B,iBAA7B;AACA,SAASC,UAAT,QAA2B,kBAA3B;AAEA,OAAO,MAAMC,cAAc,GAAG,MAAM,OAAOC,QAAP,EAAiBC,QAAjB,KAA8B;AAChE,MAAI;AACF,UAAMC,QAAQ,GAAG,MAAMZ,QAAQ,EAA/B;AACAU,IAAAA,QAAQ,CAACG,uBAAuB,CAAC;AAAEC,MAAAA;AAAF,KAAD,CAAxB,CAAR;AACD,GAHD,CAGE,OAAOC,CAAP,EAAU;AACV;AACAL,IAAAA,QAAQ,CAACM,SAAS,EAAV,CAAR;AACD;AACF,CARM;AAUP,OAAO,MAAMC,YAAY,GAAG,CAACC,QAAD,EAAWC,OAAX,KAAuB,MAAMT,QAAN,IAAkB;AACnE,MAAI;AACF,UAAME,QAAQ,GAAG,MAAMV,MAAM,CAACgB,QAAD,CAA7B;AACAR,IAAAA,QAAQ,CAACF,UAAU,CAACI,QAAQ,CAACQ,IAAT,CAAcC,OAAf,CAAX,CAAR;AAEAF,IAAAA,OAAO,CAACG,IAAR,CAAa,QAAb;AACD,GALD,CAKE,OAAOP,CAAP,EAAU;AACVQ,IAAAA,OAAO,CAACC,GAAR,CAAY,sBAAZ,EAAoCT,CAApC;AACAL,IAAAA,QAAQ,CAACF,UAAU,CAACO,CAAC,CAACH,QAAF,CAAWQ,IAAZ,EAAkBL,CAAC,CAACH,QAAF,CAAWa,MAA7B,EAAqC,eAArC,CAAX,CAAR;AACAf,IAAAA,QAAQ,CAACM,SAAS,EAAV,CAAR;AACD;;AACDN,EAAAA,QAAQ,CAACH,YAAY,CAAC,KAAD,CAAb,CAAR;AACD,CAZM;AAcP,OAAO,MAAMmB,WAAW,GAAG,CAACR,QAAD,EAAWC,OAAX,KAAuB,MAAMT,QAAN,IAAkB;AAClE,MAAI;AACF,UAAME,QAAQ,GAAG,MAAMX,KAAK,CAACiB,QAAD,CAA5B;AAEAR,IAAAA,QAAQ,CAACiB,kBAAkB,CAAC;AAAEb,MAAAA,IAAI,EAAEF,QAAQ,CAACQ,IAAT,CAAcN,IAAtB;AAA4Bc,MAAAA,KAAK,EAAEhB,QAAQ,CAACQ,IAAT,CAAcQ;AAAjD,KAAD,CAAnB,CAAR,CAHE,CAIF;AACD,GALD,CAKE,OAAOb,CAAP,EAAU;AACVQ,IAAAA,OAAO,CAACC,GAAR,CAAY,qBAAZ,EAAmCT,CAAC,CAACH,QAArC,EADU,CAEV;;AACAF,IAAAA,QAAQ,CAACM,SAAS,EAAV,CAAR;AACD;;AACDN,EAAAA,QAAQ,CAACH,YAAY,CAAC,KAAD,CAAb,CAAR;AACD,CAZM;AAcP,OAAO,MAAMoB,kBAAkB,GAAGT,QAAQ,KAAK;AAC7CW,EAAAA,IAAI,EAAEzB,aADuC;AAE7C0B,EAAAA,OAAO,EAAEZ;AAFoC,CAAL,CAAnC;AAKP,OAAO,MAAML,uBAAuB,GAAGK,QAAQ,KAAK;AAClDW,EAAAA,IAAI,EAAEvB,WAD4C;AAElDwB,EAAAA,OAAO,EAAEZ;AAFyC,CAAL,CAAxC;AAKP,OAAO,MAAMF,SAAS,GAAG,OAAO;AAC9Ba,EAAAA,IAAI,EAAE1B;AADwB,CAAP,CAAlB;AAIP,OAAO,MAAM4B,YAAY,GAAGZ,OAAO,IAAI;AACrCA,EAAAA,OAAO,CAACG,IAAR,CAAa,QAAb;AACA,SAAO;AACLO,IAAAA,IAAI,EAAExB;AADD,GAAP;AAGD,CALM","sourcesContent":["import { loadUser, login, signup } from 'Services/auth.service'\nimport { AUTH_ERROR, LOGIN_SUCCESS, LOGOUT_SUCCESS, USER_LOADED } from 'Store/constants/auth.constant'\nimport { toggleLoader } from './common.action'\nimport { getMessage } from './message.action'\n\nexport const loadUserAction = () => async (dispatch, getState) => {\n  try {\n    const response = await loadUser()\n    dispatch(loaderUserActionSuccess({ user }))\n  } catch (e) {\n    // console.log('user load action error:', e)\n    dispatch(authError())\n  }\n}\n\nexport const signupAction = (userdata, history) => async dispatch => {\n  try {\n    const response = await signup(userdata)\n    dispatch(getMessage(response.data.message))\n\n    history.push('/login')\n  } catch (e) {\n    console.log('signup action error:', e)\n    dispatch(getMessage(e.response.data, e.response.status, 'REGISTER_FAIL'))\n    dispatch(authError())\n  }\n  dispatch(toggleLoader(false))\n}\n\nexport const loginAction = (userdata, history) => async dispatch => {\n  try {\n    const response = await login(userdata)\n\n    dispatch(loginActionSuccess({ user: response.data.user, token: response.data.token }))\n    // history.push('/posts')\n  } catch (e) {\n    console.log('login action error:', e.response)\n    // dispatch(getMessage(e.response.data, e.response.status, 'REGISTER_FAIL'))\n    dispatch(authError())\n  }\n  dispatch(toggleLoader(false))\n}\n\nexport const loginActionSuccess = userdata => ({\n  type: LOGIN_SUCCESS,\n  payload: userdata,\n})\n\nexport const loaderUserActionSuccess = userdata => ({\n  type: USER_LOADED,\n  payload: userdata,\n})\n\nexport const authError = () => ({\n  type: AUTH_ERROR,\n})\n\nexport const logoutAction = history => {\n  history.push('/login')\n  return {\n    type: LOGOUT_SUCCESS,\n  }\n}\n"]},"metadata":{},"sourceType":"module"}