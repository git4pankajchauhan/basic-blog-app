{"ast":null,"code":"import { createPost, deletePost, getPosts, getSinglePost, updatePost } from 'Services/posts.service';\nimport { post_type } from 'Store/constants/post.constant'; // import { CONFIRMED_CREATE_POST_ACTION, CONFIRMED_DELETE_POST_ACTION, CONFIRMED_EDIT_POST_ACTION, CONFIRMED_GET_POST, CONFIRMED_GET_POSTS, GET_POSTS_BY_TAG, GET_SINGLE_POST, SET_SINGLE_POST } from 'Store/constants/post.constant'\n\nimport { closeDrawer } from './common.action'; // get all posts from api\n\nexport const getPostsAPI = () => async (dispatch, getState) => {\n  try {\n    const posts = await getPosts();\n    const postsdata = posts.data;\n    dispatch({\n      type: post_type.GET_POSTS,\n      payload: postsdata\n    });\n  } catch (error) {\n    console.log('get post action error', error);\n  }\n}; // get single post from api\n\nexport const getSinglePostAPI = id => async dispatch => {\n  try {\n    const post = await getSinglePost(id);\n    const postdata = post.data;\n    dispatch({\n      type: post_type.GET_SINGLE_POST,\n      payload: postdata\n    });\n  } catch (error) {\n    console.log('get post action error', error);\n  }\n}; // get filtered post from store\n\nexport const getPostActionByTag = tags => ({\n  type: GET_POSTS_BY_TAG,\n  payload: tags\n}); // get single post from store\n\nexport const confirmGetSinglePostAction = id => ({\n  type: GET_SINGLE_POST,\n  payload: id\n}); // create new post\n\nexport const createPostAction = postData => async (dispatch, getState) => {\n  try {\n    const result = await createPost(postData);\n    const singlePost = result.data.lastpost;\n    dispatch(confirmedCreatePostAction(singlePost));\n    dispatch(closeDrawer());\n  } catch (error) {\n    console.log('create post action error', error);\n  }\n};\nexport const confirmedCreatePostAction = post => ({\n  type: CONFIRMED_CREATE_POST_ACTION,\n  payload: post\n});\nexport const deletePostAction = postId => async (dispatch, getState) => {\n  try {\n    await deletePost(postId);\n    dispatch(confirmedDeletePostAction(postId));\n  } catch (error) {\n    console.log('delete post action error', error);\n  }\n};\nexport const confirmedDeletePostAction = postId => ({\n  type: CONFIRMED_DELETE_POST_ACTION,\n  payload: postId\n});\nexport const updatePostAction = post => async (dispatch, getState) => {\n  try {\n    await updatePost(post._id, post);\n    dispatch(confirmedUpdatePostAction(post));\n    dispatch(closeDrawer());\n  } catch (error) {\n    console.log('update post action error', error);\n  }\n};\nexport const confirmedUpdatePostAction = post => ({\n  type: CONFIRMED_EDIT_POST_ACTION,\n  payload: post\n});","map":{"version":3,"sources":["/home/neosoft/Desktop/Pankaj/learning/react/blog-app/basic-blog-redux-app/src/Store/actions/post.action.js"],"names":["createPost","deletePost","getPosts","getSinglePost","updatePost","post_type","closeDrawer","getPostsAPI","dispatch","getState","posts","postsdata","data","type","GET_POSTS","payload","error","console","log","getSinglePostAPI","id","post","postdata","GET_SINGLE_POST","getPostActionByTag","tags","GET_POSTS_BY_TAG","confirmGetSinglePostAction","createPostAction","postData","result","singlePost","lastpost","confirmedCreatePostAction","CONFIRMED_CREATE_POST_ACTION","deletePostAction","postId","confirmedDeletePostAction","CONFIRMED_DELETE_POST_ACTION","updatePostAction","_id","confirmedUpdatePostAction","CONFIRMED_EDIT_POST_ACTION"],"mappings":"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","sourcesContent":["import { createPost, deletePost, getPosts, getSinglePost, updatePost } from 'Services/posts.service'\nimport { post_type } from 'Store/constants/post.constant'\n// import { CONFIRMED_CREATE_POST_ACTION, CONFIRMED_DELETE_POST_ACTION, CONFIRMED_EDIT_POST_ACTION, CONFIRMED_GET_POST, CONFIRMED_GET_POSTS, GET_POSTS_BY_TAG, GET_SINGLE_POST, SET_SINGLE_POST } from 'Store/constants/post.constant'\nimport { closeDrawer } from './common.action'\n\n// get all posts from api\nexport const getPostsAPI = () => async (dispatch, getState) => {\n  try {\n    const posts = await getPosts()\n    const postsdata = posts.data\n    dispatch({\n      type: post_type.GET_POSTS,\n      payload: postsdata,\n    })\n  } catch (error) {\n    console.log('get post action error', error)\n  }\n}\n\n// get single post from api\nexport const getSinglePostAPI = id => async dispatch => {\n  try {\n    const post = await getSinglePost(id)\n    const postdata = post.data\n    dispatch({\n      type: post_type.GET_SINGLE_POST,\n      payload: postdata,\n    })\n  } catch (error) {\n    console.log('get post action error', error)\n  }\n}\n\n// get filtered post from store\nexport const getPostActionByTag = tags => ({\n  type: GET_POSTS_BY_TAG,\n  payload: tags,\n})\n// get single post from store\nexport const confirmGetSinglePostAction = id => ({\n  type: GET_SINGLE_POST,\n  payload: id,\n})\n// create new post\nexport const createPostAction = postData => async (dispatch, getState) => {\n  try {\n    const result = await createPost(postData)\n    const singlePost = result.data.lastpost\n    dispatch(confirmedCreatePostAction(singlePost))\n    dispatch(closeDrawer())\n  } catch (error) {\n    console.log('create post action error', error)\n  }\n}\n\nexport const confirmedCreatePostAction = post => ({\n  type: CONFIRMED_CREATE_POST_ACTION,\n  payload: post,\n})\n\nexport const deletePostAction = postId => async (dispatch, getState) => {\n  try {\n    await deletePost(postId)\n    dispatch(confirmedDeletePostAction(postId))\n  } catch (error) {\n    console.log('delete post action error', error)\n  }\n}\n\nexport const confirmedDeletePostAction = postId => ({\n  type: CONFIRMED_DELETE_POST_ACTION,\n  payload: postId,\n})\n\nexport const updatePostAction = post => async (dispatch, getState) => {\n  try {\n    await updatePost(post._id, post)\n    dispatch(confirmedUpdatePostAction(post))\n    dispatch(closeDrawer())\n  } catch (error) {\n    console.log('update post action error', error)\n  }\n}\n\nexport const confirmedUpdatePostAction = post => ({\n  type: CONFIRMED_EDIT_POST_ACTION,\n  payload: post,\n})\n"]},"metadata":{},"sourceType":"module"}